// <auto-generated />
using System;
using Customers_DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Customers_DAL.Migrations
{
    [DbContext(typeof(BarbershopDbContext))]
    [Migration("20220705153951_IdentityMigration")]
    partial class IdentityMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AS_SC_UTF8")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppDate")
                        .HasColumnType("date");

                    b.Property<int>("AppointmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("BarberUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("BeginTime")
                        .HasColumnType("time");

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BarberUserId");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("Appointment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppDate = new DateTime(2022, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 3,
                            BarberUserId = 4,
                            BeginTime = new TimeSpan(0, 12, 0, 0, 0),
                            CustomerUserId = 19,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AppDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 9,
                            BeginTime = new TimeSpan(0, 16, 0, 0, 0),
                            CustomerUserId = 16,
                            EndTime = new TimeSpan(0, 17, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AppDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 3,
                            BeginTime = new TimeSpan(0, 17, 0, 0, 0),
                            CustomerUserId = 18,
                            EndTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AppDate = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 1,
                            BarberUserId = 6,
                            BeginTime = new TimeSpan(0, 13, 30, 0, 0),
                            CustomerUserId = 22,
                            EndTime = new TimeSpan(0, 15, 15, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AppDate = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 8,
                            BeginTime = new TimeSpan(0, 16, 15, 0, 0),
                            CustomerUserId = 17,
                            EndTime = new TimeSpan(0, 17, 15, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            AppDate = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 1,
                            BarberUserId = 5,
                            BeginTime = new TimeSpan(0, 10, 0, 0, 0),
                            CustomerUserId = 21,
                            EndTime = new TimeSpan(0, 10, 15, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            AppDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 6,
                            BeginTime = new TimeSpan(0, 15, 0, 0, 0),
                            CustomerUserId = 23,
                            EndTime = new TimeSpan(0, 15, 45, 0, 0)
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentService", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 2,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 3,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 4,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 4,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 7,
                            AppointmentId = 4,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 8,
                            AppointmentId = 5,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 9,
                            AppointmentId = 6,
                            ServiceId = 6
                        },
                        new
                        {
                            Id = 10,
                            AppointmentId = 7,
                            ServiceId = 5
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.Property<int>("EmployeeUserId")
                        .HasColumnType("int");

                    b.Property<int>("ChairNum")
                        .HasColumnType("int");

                    b.HasKey("EmployeeUserId")
                        .HasName("PK_Barber_User");

                    b.ToTable("Barber", (string)null);

                    b.HasData(
                        new
                        {
                            EmployeeUserId = 3,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 4,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 5,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 6,
                            ChairNum = 4
                        },
                        new
                        {
                            EmployeeUserId = 8,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 9,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 10,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 12,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 13,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 14,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 15,
                            ChairNum = 4
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Descript")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Branch", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "вул. Банкова 12, Київ, Київська область",
                            Descript = "Barbershop Lodon(1)"
                        },
                        new
                        {
                            Id = 2,
                            Address = "вул. Героїв майдану 55, Чернівці, Чернівецька область",
                            Descript = "Barbershop Lodon(2)"
                        },
                        new
                        {
                            Id = 3,
                            Address = "вул. Степана Бандери 2-А, Львів, Львівська область",
                            Descript = "Barbershop Lodon(3)"
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VisitsNum")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK_Customer_User");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 16,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 17,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 18,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 19,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 20,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 21,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 22,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 23,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 24,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 25,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 26,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 27,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 28,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 29,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 30,
                            VisitsNum = 0
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.DayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date_");

                    b.HasKey("Id");

                    b.ToTable("DayOff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PassportImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK_Employee_User");

                    b.HasIndex("BranchId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "Бульвар незалежності 12-А, Київ, Київська область",
                            Birthday = new DateTime(1995, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 1,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 2,
                            Address = "вул. Золотоворітська 18, Київ, Київська область",
                            Birthday = new DateTime(1998, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 3,
                            Address = "вул. Дарвіна, Київ, Київська область",
                            Birthday = new DateTime(1994, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 4,
                            Address = "вул. Січових Стрільців, Київ, Київська область",
                            Birthday = new DateTime(1997, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 5,
                            Address = "вул. Івана Богуна, Київ, Київська область",
                            Birthday = new DateTime(2000, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 6,
                            Address = "вул. Татарська, Петропавлівська Борщагівка, Київська область",
                            Birthday = new DateTime(1993, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 7,
                            Address = "вул. Університетська, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1993, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 8,
                            Address = "вул. Поштова, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 9,
                            Address = "вул. Богдана Хмельницького, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1995, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 10,
                            Address = "вул. Селятинська, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1998, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 11,
                            Address = "вул. Михайлівська, Львів, Львівська область",
                            Birthday = new DateTime(1990, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 12,
                            Address = "вул. Лесі Українки, Львів, Львівська область",
                            Birthday = new DateTime(1998, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 13,
                            Address = "вул. Вірменська, Львів, Львівська область",
                            Birthday = new DateTime(1991, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 14,
                            Address = "вул. Шолом-Алейхема, Львів, Львівська область",
                            Birthday = new DateTime(1996, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 15,
                            Address = "вул. Горлівська, Львів, Львівська область",
                            Birthday = new DateTime(1996, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.EmployeeDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DayOffId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayOffId");

                    b.HasIndex("EmployeeUserId");

                    b.ToTable("EmployeeDayOff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOffId = 1,
                            EmployeeUserId = 3
                        },
                        new
                        {
                            Id = 2,
                            DayOffId = 2,
                            EmployeeUserId = 9
                        },
                        new
                        {
                            Id = 3,
                            DayOffId = 3,
                            EmployeeUserId = 14
                        },
                        new
                        {
                            Id = 4,
                            DayOffId = 4,
                            EmployeeUserId = 15
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.PossibleTime", b =>
                {
                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.HasKey("Time")
                        .HasName("PK__Possible__8E79CB0049844667");

                    b.ToTable("PossibleTime", (string)null);

                    b.HasData(
                        new
                        {
                            Time = new TimeSpan(0, 8, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 23, 0, 0, 0),
                            Available = true
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name_");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("Service_", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Duration = 60,
                            Name = "Стрижка",
                            Price = 300m
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Duration = 90,
                            Name = "Стрижка з бородою",
                            Price = 450m
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            Duration = 30,
                            Name = "Голова - камуфляж сивини",
                            Price = 200m
                        },
                        new
                        {
                            Id = 4,
                            Available = true,
                            Duration = 30,
                            Name = "Борода - камуфляж сивини",
                            Price = 150m
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            Duration = 45,
                            Name = "Дитяча стрижка",
                            Price = 200m
                        },
                        new
                        {
                            Id = 6,
                            Available = true,
                            Duration = 15,
                            Name = "Укладка",
                            Price = 100m
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            Duration = 15,
                            Name = "Королівське гоління",
                            Price = 250m
                        },
                        new
                        {
                            Id = 8,
                            Available = true,
                            Duration = 15,
                            Name = "Видалення волосся воском",
                            Price = 100m
                        },
                        new
                        {
                            Id = 9,
                            Available = false,
                            Duration = 75,
                            Name = "Чистка лиця",
                            Price = 400m
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.ServiceDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountSize")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceDiscount", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 2,
                            DiscountSize = 20,
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            DiscountSize = 15,
                            ServiceId = 3
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User_", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22aff58f-3002-4142-a5c1-f7ada188d19f",
                            Email = "User1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Петро",
                            LastName = "Василенко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPhyWSSpu1VQC5HQx2piOTBK5DpKtyU2HVcIHBUYeWtmAO/ydUCII1ylQustTsJNng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb695984-28ea-4490-8b09-9afa0eb7cc63",
                            TwoFactorEnabled = false,
                            UserName = "User1@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b3e2c6b-46d0-4d83-bf29-eaefa2a107dd",
                            Email = "User2@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Іван",
                            LastName = "Григоренко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER2@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHKy9oHywFE3qeMj1UXjL2DaS2Tkb5pzwZgIcb7zd2eriQl+YRJJRZE54CTqUQtupg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "647a3498-c0b8-4c22-a7e6-6b67e5da6947",
                            TwoFactorEnabled = false,
                            UserName = "User2@outlook.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "956c030e-a6e5-4f18-802e-2162352b6cbe",
                            Email = "User3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Олександр",
                            LastName = "Шевченко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPSQgKVtJYfB1rwxhfd1ULIGDvrZ/M6lgKDR9UaC/8shXbk5Uo6ji+XnjZQwiiJOsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab2bf23e-177a-4fb2-9efa-6700d609e02e",
                            TwoFactorEnabled = false,
                            UserName = "User3@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd445aae-5106-4050-8d75-8ae4714545c6",
                            Email = "User4@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Роман",
                            LastName = "Добровольський",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER4@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMxAzq2N8QwWV3GXgy1AsF48zrWQjOXnI5nZp+e9DRjOW0febz3x5AMPqMAcQb2tWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fe3632d-a15c-4577-8f94-be63bdb2e4e1",
                            TwoFactorEnabled = false,
                            UserName = "User4@outlook.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d333fe1-9092-427c-9c60-6a27bfe6c670",
                            Email = "User5@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Степан",
                            LastName = "Петришко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER5@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPuR+4XVdyzvbMRgyi6ygeSFlCubWpRFb5QLxIStOe3T2RcJHxDaoLTP6Npxjv7Xdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ffb8eee-26f9-4814-a5b5-1412e373cf77",
                            TwoFactorEnabled = false,
                            UserName = "User5@outlook.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c7cb3a8-e591-4164-84b4-f48f976f1c86",
                            Email = "User6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Світлана",
                            LastName = "Петришко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJVW2HPmtMWeY0AAH/r5qUBhhO1zipJi02M9wPeVdhLzZpQO4lcmHk+9UALuRHCKQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "65c80871-b4d2-4691-afdd-2c5af3562a78",
                            TwoFactorEnabled = false,
                            UserName = "User6@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63ee0d3b-e81e-45ce-a158-3121abef03f3",
                            Email = "User7@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Богдан",
                            LastName = "Ящук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER7@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECnZMRzSlPd2hVPN7eNm5terRiCJQVuULSTWRfkJr7Bo0sTgLiv5x6OwQ1rQfg9Xbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e260ecbb-8baa-4b66-a13b-28b729c425f2",
                            TwoFactorEnabled = false,
                            UserName = "User7@yahoo.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c55dba4-a4d4-48d0-b087-cca59df57ce8",
                            Email = "User8@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Валентина",
                            LastName = "Генко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER8@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAqSqb3bJvByacodj6EujLXhDuydpMX5PKbXyLbIawgnVIFheZnsNN+U9g3MA+uIsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2765c9d-7167-4da1-bb09-ead05fa828cf",
                            TwoFactorEnabled = false,
                            UserName = "User8@outlook.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf8859f2-62f2-4eeb-9de6-987cec08aad7",
                            Email = "User9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Андрій",
                            LastName = "Івашко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER9@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHKNmU9qn6MZ1iSqVZ/YZcWpXU0G4i6CKUNqVWSf0cBehVf23Nde4Z+te26NUieflA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8d3e583-740c-475c-a8d7-78e52c301fe6",
                            TwoFactorEnabled = false,
                            UserName = "User9@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "240c084d-a308-46f2-8176-dac439129421",
                            Email = "User10@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Олександр",
                            LastName = "Ванченко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER10@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENO7qcEruKtDg2RGjG+NCuEWwqU/TsE7+BYPUfrKpFxkYYTiIalq9ytrpXG68XGeWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3795669-849c-4c86-9b52-043edeff91f5",
                            TwoFactorEnabled = false,
                            UserName = "User10@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e992370-2a71-47ec-952e-c5bd4a6a4919",
                            Email = "User11@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Володимир",
                            LastName = "Михайлішин",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER11@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEGVFi6LLPOap/+30DYosyXy41XmqszNVhLmjirtVqzYY5270vX81fUxaA7y/R8ygcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec6de2af-33ff-4eb5-b36a-ef662c41bffb",
                            TwoFactorEnabled = false,
                            UserName = "User11@ukr.net"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "795e5409-6ecd-4e42-a7b1-470d2a7c1940",
                            Email = "User12@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Станіслав",
                            LastName = "Жолудь",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER12@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFHFyGb1VkuJgKLnd2LpJQC3ykf29qaAbC6VBFUae8XzWqpfk8x9WoINag/VjT1Ehg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b0c15af-fc6f-4acb-a872-a901b5b0d44d",
                            TwoFactorEnabled = false,
                            UserName = "User12@outlook.com"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ba13ab4-5d91-4350-aae6-8e20accb8a44",
                            Email = "User13@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Микола",
                            LastName = "Лисенко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER13@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBd7Z0AiHbWZDT7Z8Q3LRYi2XCpA4EZNDJ3bgq2RJmq73PshZCVHD78S6ZUT/+pULQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "184a8056-328c-4ebc-a9de-2c004c2d5ed3",
                            TwoFactorEnabled = false,
                            UserName = "User13@gmail.com"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "000a9674-cf71-44bc-8511-77766ded2c52",
                            Email = "User14@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Дмитро",
                            LastName = "Жовнірчук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER14@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDLwkBxBAD310TagRhJe6auE2vqg1QDvKNZVvSY1w9moqnQ0wBEUiHWDlUwrbAyAmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a29732ea-e98b-45e5-8a45-14bd66b81ed9",
                            TwoFactorEnabled = false,
                            UserName = "User14@outlook.com"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6ed564d-67b2-4650-8b65-5a1fc9f7fcce",
                            Email = "User15@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Валентин",
                            LastName = "Федоренко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER15@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEIxPeStJoF00s57dsG81EdkQHT+WX/m788nhE1X2TDF7+E8ZC/y5WaMeuWMVsldVqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8cac407-1a68-48fb-9abd-78792dd432c3",
                            TwoFactorEnabled = false,
                            UserName = "User15@ukr.net"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3fdaf71-1b88-487b-b69d-ab6b4a48c798",
                            Email = "User16@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Віталій",
                            LastName = "Свистун",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER16@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF+DK8C4+dDzEUAuFiQgaHzheQ+j/PatyYCTOa0Jkw6zJEmdS5CwiWxPi9g9n2qR/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f83b2c3-a121-46a9-9e08-87587aa0f2fc",
                            TwoFactorEnabled = false,
                            UserName = "User16@gmail.com"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ab6df61-bb21-4ba9-a78b-3ddf0dc2459e",
                            Email = "User17@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Інокентій",
                            LastName = "Фірташ",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER17@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI17+flfuSM3gtMJBLqVm8NbGJjnZvC/vZL0qMqdqo8rfjOgVVRhAI1Aj5525xVICw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec90fada-6d5c-4762-b190-d2a40734fcbc",
                            TwoFactorEnabled = false,
                            UserName = "User17@gmail.com"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88e2238f-9eba-4b84-86b4-199fe8d0c179",
                            Email = "User18@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ярослав",
                            LastName = "Татарчук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER18@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAqIgapskl9ypTCNLXY1PF8R+RKa4Nyel3WK5Qgtv2WV0CuBLPXPfXRbufsmifjSDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "760141d1-e949-49be-8372-d0d7828a66ef",
                            TwoFactorEnabled = false,
                            UserName = "User18@gmail.com"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6e0a420-f30d-42cd-a03a-8f99514763eb",
                            Email = "User19@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Йосиф",
                            LastName = "Дмитренко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER19@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEEnhLkT3zSA6NXNCxxYCR7rkBa5Ryxr1NF1pyDNlgNVgTuyXBBCZDROMwd/Z/58Y1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc93cf72-c960-4aa6-9ff1-2b2eed41a635",
                            TwoFactorEnabled = false,
                            UserName = "User19@ukr.net"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b44f2723-201b-442b-a351-2176486a7ac8",
                            Email = "User20@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Констянтин",
                            LastName = "Шарапенко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER20@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEApew7DDbSHRO7rNqzElhbKTracyhjvANLUUyu6QK5Z6AzZr7At1XaN6URBI/U705Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0aae1c3-ebc1-44ac-b43a-4c8cd7649502",
                            TwoFactorEnabled = false,
                            UserName = "User20@ukr.net"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ab5ebd7-9ae7-43f7-ac0a-3a76388fff75",
                            Email = "User21@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Олег",
                            LastName = "Притула",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER21@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ601x1DlkjQ/E0ODspcxMCX6RDbV2bIOSSCRMGdssRY/91R3sJSmRcFvHVgeyqjWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72491de4-03f1-4902-8b8a-c19ec1b69f44",
                            TwoFactorEnabled = false,
                            UserName = "User21@outlook.com"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d250c0bf-a685-4052-b6ee-2692b6423ee9",
                            Email = "User22@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Анатолій",
                            LastName = "Назаренко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER22@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMeuo2wqwJUWEkMiHJueLbGnmbFERq4PR13W9BFVOCAZRgHNbyOXVlrhqoSlPOdgXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3dd7b7c2-57e5-4469-a17b-3afa705d468b",
                            TwoFactorEnabled = false,
                            UserName = "User22@gmail.com"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "039a07bc-1315-43ce-835c-1466371859b6",
                            Email = "User23@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Микола",
                            LastName = "Вакуленко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER23@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEE5yp/iIVw+fQmu4Zy3qEKJBPGeEv+LoZKg0w78gU+mGd2jmfokn0fS+efpx5w5Cmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76441594-db81-420f-9441-f013dca8c10f",
                            TwoFactorEnabled = false,
                            UserName = "User23@ukr.net"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f582ac18-a619-41d0-86cf-4a9345aef27f",
                            Email = "User24@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Степан",
                            LastName = "Барабаш",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER24@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH3U997CnpqhD6Nuoot9uT2bF8OqzJ3dWSNSvUbDNgjYbMNHx72LWxPZ69ws0uLWWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2511534-fb4d-4708-b4c1-ee8fff5569ab",
                            TwoFactorEnabled = false,
                            UserName = "User24@outlook.com"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "325bad3a-d658-413d-b1ef-a1ac797620aa",
                            Email = "User25@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Денис",
                            LastName = "Ярема",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER25@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO15keNZzI7fZm/WTl4VHfPyfhIKbUX/W+1JNkQCGwmUedDJxoZTGNj3W6TPJWOMtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1c35900-ef03-4d9f-a3e6-73e9ae44b725",
                            TwoFactorEnabled = false,
                            UserName = "User25@gmail.com"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46f5db17-d558-4e50-aacc-1a15ca7646cc",
                            Email = "User26@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Олег",
                            LastName = "Таралевич",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER26@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEANp/hqiuWByIbUo1yr37lIBQy3N6C/a9P5rtxTb3STWpt5FntFhiTO6Gta/FE49cQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "649a5586-d0ca-4098-ab77-c91c25e5aff5",
                            TwoFactorEnabled = false,
                            UserName = "User26@ukr.net"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5039ea4-58cb-439a-a484-754be97c6b50",
                            Email = "User27@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Сергій",
                            LastName = "Іващук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER27@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJdXZbYEB8hb0C/U7QHz9C4q2CwSMWfTNpAPxA4Pp2h39SZwsibx2JKajkE3/1aInQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e41fd558-b0f3-41ae-b51d-7170362b24f7",
                            TwoFactorEnabled = false,
                            UserName = "User27@gmail.com"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f68e5fd-0a3e-46e0-8ebb-7d3da0cd3345",
                            Email = "User28@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Михайло",
                            LastName = "Компанієць",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER28@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKw2/ukfAQedyJGPPivTc8Nr+u+wkRAYAxmEuWiAk8yNWXnY+eWRtsYcyWszw40QtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68bb914f-9148-47ec-9ef8-034e28360804",
                            TwoFactorEnabled = false,
                            UserName = "User28@yahoo.com"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "803c9132-be08-4a1e-811f-f3be6de7f226",
                            Email = "User29@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Андрій",
                            LastName = "Іващук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER29@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPAH29tzslexE+NFRoVE3zrCz5vM2cNkGUlrkj8hubwWvNewNim3GkD9ko8Lg0jy9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cdf592ca-7ba9-41b3-9a5c-082f8c6242d5",
                            TwoFactorEnabled = false,
                            UserName = "User29@outlook.com"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "302807c0-de0b-4b73-9a0c-e2679bf010c1",
                            Email = "User30@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Назар",
                            LastName = "Мельник",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER30@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFxfmRJhDl3Z/3VsK+n3/2UfBfCXWP3sn9bN7HGQT8wBh4ry+3U69fICc/MsYwYtWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04dbac00-ad68-4ea3-b365-204af4331059",
                            TwoFactorEnabled = false,
                            UserName = "User30@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "3",
                            Name = "Barber",
                            NormalizedName = "Barber"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "4",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 22,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 23,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 24,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 25,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 26,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 27,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 28,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 29,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 30,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Barber", "Barber")
                        .WithMany("Appointments")
                        .HasForeignKey("BarberUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Barbe__3D5E1FD2");

                    b.HasOne("Customers_DAL.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Custo__3E52440B");

                    b.Navigation("Barber");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Appointme__Appoi__412EB0B6");

                    b.HasOne("Customers_DAL.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Appointme__Servi__4222D4EF");

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Employee", "Employee")
                        .WithOne("Barber")
                        .HasForeignKey("Customers_DAL.Entities.Barber", "EmployeeUserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Barber_User");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Customers_DAL.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Customer_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Employee__Branch__29572725");

                    b.HasOne("Customers_DAL.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Customers_DAL.Entities.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_User");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Customers_DAL.Entities.EmployeeDayOff", b =>
                {
                    b.HasOne("Customers_DAL.Entities.DayOff", "DayOff")
                        .WithMany("EmployeeDayOffs")
                        .HasForeignKey("DayOffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK__EmployeeD__DayOf__2F10007B");

                    b.HasOne("Customers_DAL.Entities.Employee", "EmployeeUser")
                        .WithMany("EmployeeDayOffs")
                        .HasForeignKey("EmployeeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__EmployeeD__Emplo__2E1BDC42");

                    b.Navigation("DayOff");

                    b.Navigation("EmployeeUser");
                });

            modelBuilder.Entity("Customers_DAL.Entities.ServiceDiscount", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Branch", "Branch")
                        .WithMany("ServiceDiscounts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ServiceDi__Branc__3A81B327");

                    b.HasOne("Customers_DAL.Entities.Service", "Service")
                        .WithMany("ServiceDiscounts")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ServiceDi__Servi__398D8EEE");

                    b.Navigation("Branch");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("ServiceDiscounts");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.DayOff", b =>
                {
                    b.Navigation("EmployeeDayOffs");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.Navigation("Barber")
                        .IsRequired();

                    b.Navigation("EmployeeDayOffs");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");

                    b.Navigation("ServiceDiscounts");
                });

            modelBuilder.Entity("Customers_DAL.Entities.User", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

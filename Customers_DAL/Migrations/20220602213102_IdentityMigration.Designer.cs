// <auto-generated />
using System;
using Customers_DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Customers_DAL.Migrations
{
    [DbContext(typeof(BarbershopDbContext))]
    [Migration("20220602213102_IdentityMigration")]
    partial class IdentityMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AS_SC_UTF8")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppDate")
                        .HasColumnType("date");

                    b.Property<int>("AppointmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("BarberUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("BeginTime")
                        .HasColumnType("time");

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BarberUserId");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("Appointment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppDate = new DateTime(2022, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 3,
                            BarberUserId = 4,
                            BeginTime = new TimeSpan(0, 12, 0, 0, 0),
                            CustomerUserId = 19,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AppDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 9,
                            BeginTime = new TimeSpan(0, 16, 0, 0, 0),
                            CustomerUserId = 16,
                            EndTime = new TimeSpan(0, 17, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AppDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 3,
                            BeginTime = new TimeSpan(0, 17, 0, 0, 0),
                            CustomerUserId = 18,
                            EndTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AppDate = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 1,
                            BarberUserId = 6,
                            BeginTime = new TimeSpan(0, 13, 30, 0, 0),
                            CustomerUserId = 22,
                            EndTime = new TimeSpan(0, 15, 15, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AppDate = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 8,
                            BeginTime = new TimeSpan(0, 16, 15, 0, 0),
                            CustomerUserId = 17,
                            EndTime = new TimeSpan(0, 17, 15, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            AppDate = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 1,
                            BarberUserId = 5,
                            BeginTime = new TimeSpan(0, 10, 0, 0, 0),
                            CustomerUserId = 21,
                            EndTime = new TimeSpan(0, 10, 15, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            AppDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 6,
                            BeginTime = new TimeSpan(0, 15, 0, 0, 0),
                            CustomerUserId = 23,
                            EndTime = new TimeSpan(0, 15, 45, 0, 0)
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentService", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 2,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 3,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 4,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 4,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 7,
                            AppointmentId = 4,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 8,
                            AppointmentId = 5,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 9,
                            AppointmentId = 6,
                            ServiceId = 6
                        },
                        new
                        {
                            Id = 10,
                            AppointmentId = 7,
                            ServiceId = 5
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.Property<int>("EmployeeUserId")
                        .HasColumnType("int");

                    b.Property<int>("ChairNum")
                        .HasColumnType("int");

                    b.HasKey("EmployeeUserId")
                        .HasName("PK_Barber_User");

                    b.ToTable("Barber", (string)null);

                    b.HasData(
                        new
                        {
                            EmployeeUserId = 3,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 4,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 5,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 6,
                            ChairNum = 4
                        },
                        new
                        {
                            EmployeeUserId = 8,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 9,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 10,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 12,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 13,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 14,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 15,
                            ChairNum = 4
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Descript")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Branch", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "вул. Банкова 12, Київ, Київська область",
                            Descript = "Barbershop Lodon(1)"
                        },
                        new
                        {
                            Id = 2,
                            Address = "вул. Героїв майдану 55, Чернівці, Чернівецька область",
                            Descript = "Barbershop Lodon(2)"
                        },
                        new
                        {
                            Id = 3,
                            Address = "вул. Степана Бандери 2-А, Львів, Львівська область",
                            Descript = "Barbershop Lodon(3)"
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VisitsNum")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK_Customer_User");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 16,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 17,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 18,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 19,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 20,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 21,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 22,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 23,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 24,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 25,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 26,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 27,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 28,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 29,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 30,
                            VisitsNum = 0
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.DayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date_");

                    b.HasKey("Id");

                    b.ToTable("DayOff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PassportImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK_Employee_User");

                    b.HasIndex("BranchId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "Бульвар незалежності 12-А, Київ, Київська область",
                            Birthday = new DateTime(1995, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 1,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 2,
                            Address = "вул. Золотоворітська 18, Київ, Київська область",
                            Birthday = new DateTime(1998, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 3,
                            Address = "вул. Дарвіна, Київ, Київська область",
                            Birthday = new DateTime(1994, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 4,
                            Address = "вул. Січових Стрільців, Київ, Київська область",
                            Birthday = new DateTime(1997, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 5,
                            Address = "вул. Івана Богуна, Київ, Київська область",
                            Birthday = new DateTime(2000, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 6,
                            Address = "вул. Татарська, Петропавлівська Борщагівка, Київська область",
                            Birthday = new DateTime(1993, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 7,
                            Address = "вул. Університетська, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1993, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 8,
                            Address = "вул. Поштова, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 9,
                            Address = "вул. Богдана Хмельницького, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1995, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 10,
                            Address = "вул. Селятинська, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1998, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 11,
                            Address = "вул. Михайлівська, Львів, Львівська область",
                            Birthday = new DateTime(1990, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 12,
                            Address = "вул. Лесі Українки, Львів, Львівська область",
                            Birthday = new DateTime(1998, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 13,
                            Address = "вул. Вірменська, Львів, Львівська область",
                            Birthday = new DateTime(1991, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 14,
                            Address = "вул. Шолом-Алейхема, Львів, Львівська область",
                            Birthday = new DateTime(1996, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 15,
                            Address = "вул. Горлівська, Львів, Львівська область",
                            Birthday = new DateTime(1996, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.EmployeeDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DayOffId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayOffId");

                    b.HasIndex("EmployeeUserId");

                    b.ToTable("EmployeeDayOff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOffId = 1,
                            EmployeeUserId = 3
                        },
                        new
                        {
                            Id = 2,
                            DayOffId = 2,
                            EmployeeUserId = 9
                        },
                        new
                        {
                            Id = 3,
                            DayOffId = 3,
                            EmployeeUserId = 14
                        },
                        new
                        {
                            Id = 4,
                            DayOffId = 4,
                            EmployeeUserId = 15
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.PossibleTime", b =>
                {
                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.HasKey("Time")
                        .HasName("PK__Possible__8E79CB0049844667");

                    b.ToTable("PossibleTime", (string)null);

                    b.HasData(
                        new
                        {
                            Time = new TimeSpan(0, 8, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 23, 0, 0, 0),
                            Available = true
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name_");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("Service_", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Duration = 60,
                            Name = "Стрижка",
                            Price = 300m
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Duration = 90,
                            Name = "Стрижка з бородою",
                            Price = 450m
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            Duration = 30,
                            Name = "Голова - камуфляж сивини",
                            Price = 200m
                        },
                        new
                        {
                            Id = 4,
                            Available = true,
                            Duration = 30,
                            Name = "Борода - камуфляж сивини",
                            Price = 150m
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            Duration = 45,
                            Name = "Дитяча стрижка",
                            Price = 200m
                        },
                        new
                        {
                            Id = 6,
                            Available = true,
                            Duration = 15,
                            Name = "Укладка",
                            Price = 100m
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            Duration = 15,
                            Name = "Королівське гоління",
                            Price = 250m
                        },
                        new
                        {
                            Id = 8,
                            Available = true,
                            Duration = 15,
                            Name = "Видалення волосся воском",
                            Price = 100m
                        },
                        new
                        {
                            Id = 9,
                            Available = false,
                            Duration = 75,
                            Name = "Чистка лиця",
                            Price = 400m
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User_", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e1ac0bc-c031-496d-bbd6-b8e140a3b7c3",
                            EmailConfirmed = false,
                            FirstName = "Петро",
                            LastName = "Василенко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEK/alR94SuUsYKT8Q/R1x7QKyUvT0fLxB7NP3aK6tN0zSCwmoULvTmyJYp3aORefJQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d8850fb-2c8c-4c77-b03f-1f9dfb8b51cd",
                            EmailConfirmed = false,
                            FirstName = "Іван",
                            LastName = "Григоренко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJgppkv1g0qNUf5zxqKMUn3MUeyxyEHeWEcknsdMb3OTRJSh78qL9tlYRfdAic2onQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ba3a136-dc0d-4a68-ad57-197e87532df2",
                            EmailConfirmed = false,
                            FirstName = "Олександр",
                            LastName = "Шевченко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBIxIri67xQE6m6yMMi0/XW3dkOOLnpEHhQq/hkaCYT8dfgezsVGPfWYTYzmJ4K6pg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d25dc5e-4713-4523-82a1-caffc5cc0740",
                            EmailConfirmed = false,
                            FirstName = "Роман",
                            LastName = "Добровольський",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECk9CPGf5l4bhtd/d3234WGlDOa9pSLafkzaLz9DTXCb/fhLwCajdzo3JdyUQPM8sg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00ad5769-7f6d-4564-8e10-8e04da9a0b14",
                            EmailConfirmed = false,
                            FirstName = "Степан",
                            LastName = "Петришко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGnDDJgEz3dO/3XMLxwfuL0XSRnFNE9447gHudKiL/Fu8EOaKcMbgXNKx4sObSUTNw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7de145c7-ef98-4715-8505-20510a39fc2d",
                            EmailConfirmed = false,
                            FirstName = "Світлана",
                            LastName = "Петришко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEHxS1u8LK9QBRg9YH559451bwv9td1Wa47JrSAM3QmGM9rvEF3rbaEUNRvWVEfHPDw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a92b87ca-8b1d-4637-806f-c826ee10db83",
                            EmailConfirmed = false,
                            FirstName = "Богдан",
                            LastName = "Ящук",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKWePaNjxn5mfAwlzhTGaXIMsITC3x0WLcjnvKGN/DHDPDE7zdZcYYW0YrVVEeaOBg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2d19e9f-3ed4-4fc7-ab0c-24e102caca6e",
                            EmailConfirmed = false,
                            FirstName = "Валентина",
                            LastName = "Генко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELpIzoXFJ7Po3S8DtvnQYzmZ7TNrkc4h0fd1fPVCuZLgPPKwH2TpUIi0uSdPfzRoLA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af9373c3-a7a4-49b5-90d6-789497cc8f62",
                            EmailConfirmed = false,
                            FirstName = "Андрій",
                            LastName = "Івашко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELXkvyUD4zg9yVRjM0t4i64yhgQ4yQifyloGFhnvdNA/52aBjxioHoV9JovPtxuAxA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92ffd833-e836-43b5-8798-c17bdbe9f7a5",
                            EmailConfirmed = false,
                            FirstName = "Олександр",
                            LastName = "Ванченко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEFPMelDkTBGliyDWeRx3nGXzEALrWuLX6qcPB4Ra/W/VdEKHVRQVxvz9jhT0hPBGmA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b0307bd-8f80-43bd-be22-15985f0804cc",
                            EmailConfirmed = false,
                            FirstName = "Володимир",
                            LastName = "Михайлішин",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMvHu7p6M+ZtNvICWVCVzpiqKTMDaUZOXs4bVJVSFuy+O0acZexrQ1IR00kpoWZFlQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14c8c2e1-4f04-42bb-a4d3-6e225e3e87a9",
                            EmailConfirmed = false,
                            FirstName = "Станіслав",
                            LastName = "Жолудь",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKc4I6OLoO/9l9GBBJ6DgHUgbTvt4ZxUxEiTcQ20ftzlu9k/UUYG1/VDHLBJetTmHg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User12"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b51afc0-0805-42f0-a104-a3a9c022b8a5",
                            EmailConfirmed = false,
                            FirstName = "Микола",
                            LastName = "Лисенко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKLhPwYIwtfXKISBWbogzaXRdsTTMU4gZ+tCjBEvXfiAZru0W1JeiwcfwUwifFcnWw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User13"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2595aa40-e2e7-4b92-8758-efd788037a5a",
                            EmailConfirmed = false,
                            FirstName = "Дмитро",
                            LastName = "Жовнірчук",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJ63H3gxCfAphLIcuucP8lgr/G/fBVMvw3Hhk7pfy9yMQBLAnPVXb9H4wDbkM1wTVg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User14"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "033ab118-1d9c-41bf-ac93-bb9fc9413902",
                            EmailConfirmed = false,
                            FirstName = "Валентин",
                            LastName = "Федоренко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELDDSxcIF7bwrcGNi7fYThxggtIdVmHsgOrfDG9frPqfG+eE3Cp6G7Ldut46iuz8cA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User15"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "009bc5e4-c155-4049-90fc-497656b7decf",
                            EmailConfirmed = false,
                            FirstName = "Віталій",
                            LastName = "Свистун",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEAbyOYQdWE9Z+DIrDgpjszTumHATDDIIQIp0UVOpCJMl/TJXJWL8fhm5ZABY4NFyfw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User16"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a033a3c2-60ac-4892-913c-9fd8e27fe58b",
                            EmailConfirmed = false,
                            FirstName = "Інокентій",
                            LastName = "Фірташ",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEN1fNpTAvFy2QHVWrzZ9jPXMa1CNIp2Ib+a7u3HkSvWz/1yAVQWUdruKD62ltr7TEQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User17"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aee2722b-68c0-45e7-9af3-9286d775161e",
                            EmailConfirmed = false,
                            FirstName = "Ярослав",
                            LastName = "Татарчук",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIx8ZEKMIat1qmy7ug4vMPc52isyIpRCr0YhdDvY6jqSEfZmxlgI8xI5dBik7e1zCg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User18"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b89c03a7-331a-429c-baa6-071ecb7a22db",
                            EmailConfirmed = false,
                            FirstName = "Йосиф",
                            LastName = "Дмитренко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBGjT7jEM405I3BknFlnDdwKa62BLguC4agmNJLcBEVv2mqEHX/g8lgo6INwFoTFyQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User19"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d21e332-0102-4abf-a224-0a1b3faf8520",
                            EmailConfirmed = false,
                            FirstName = "Констянтин",
                            LastName = "Шарапенко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMJWMdKrImT1sUyBrMqYGFVUZgLxWo/pnSVIg+Ld87wDnjkcQ13b0usZ30w/UnMyfg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User20"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4f8f146-3cc8-4cb0-b9d0-32e50174e3fe",
                            EmailConfirmed = false,
                            FirstName = "Олег",
                            LastName = "Притула",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKxAg28Gtu/DwGKHz3jbAi38tnC9Oy3LBc6HSAqk4ZWSAAPfuCDj74c4ehO3UiU6OQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User21"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b416149-018b-42e2-9830-58553318709f",
                            EmailConfirmed = false,
                            FirstName = "Анатолій",
                            LastName = "Назаренко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPVmmU1H+KSPSzXhYx5oF6CzcDfwpNzKm7DJVHydUoqF8axZVqWUIGv+j+1G5uFzGA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User22"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd355748-4d6f-4a39-b53a-d7ad72508f2e",
                            EmailConfirmed = false,
                            FirstName = "Микола",
                            LastName = "Вакуленко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKMUgN8m0Q9SoApBxEmz6yQrrLnRodHPQ9Bp9YQCZXedUKGlBqRY8W1b/ynZF2zWjg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User23"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c625edff-4c6d-4e7f-aeec-1099769cc7a2",
                            EmailConfirmed = false,
                            FirstName = "Степан",
                            LastName = "Барабаш",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECC3Xzztna60GTac5VfF1VRklHzAlm1BvMx5i+mgzFnem2W9YhlbbLWDwQMwjwo9IA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User24"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be88073f-5080-463b-8276-ab31270b96df",
                            EmailConfirmed = false,
                            FirstName = "Денис",
                            LastName = "Ярема",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELrUUlIdNM2yC3LLr7xd3SmQcc/j4wixvKlqUfge99Ltes9yEYUNAeHRPnZjQmeeyA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User25"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1d010d7-71bc-4fbe-b76b-afded2a9779e",
                            EmailConfirmed = false,
                            FirstName = "Олег",
                            LastName = "Таралевич",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPxrDl7WCV2iCeO2nCCv10gHS29onWHjJ5bVqCZiRV+oEJytjN1wIdshf3babGV0sA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User26"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26c39e9d-f8f7-4b2d-9e6b-0ac243a90106",
                            EmailConfirmed = false,
                            FirstName = "Сергій",
                            LastName = "Іващук",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEINeZCLI7aodwOvG8pQ7JtJIFj9iH5l9vyKEfLtW6lmUVYqoz4CYTcoy7/lWoSPd6A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User27"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3882a793-a6ba-4fb0-9515-373fca8a565d",
                            EmailConfirmed = false,
                            FirstName = "Михайло",
                            LastName = "Компанієць",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEafAuHMTwnfVJuLFK9cBJhKct6BBf+aKX9595EH0CaGWUjDPOTmlPUSDx5LIKyXsw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User28"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38b2c5cc-f33d-46c2-bd84-d9f408102d50",
                            EmailConfirmed = false,
                            FirstName = "Андрій",
                            LastName = "Іващук",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJ75oK2+Q0ELx9MR37vBF+ybrpq83AWnkSpgcXOZbYEYmmS7EOAucZMwyia0VpOPhA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User29"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45a6abcf-9332-4999-9a11-c6e312b8e1ce",
                            EmailConfirmed = false,
                            FirstName = "Назар",
                            LastName = "Мельник",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEOUuoxNa+kklao5euNqBqa5uW5Z04Om8kx8Nc1pF99K77JtAkU8Hv6g7FedcZ6iIFA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User30"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "3",
                            Name = "Barber",
                            NormalizedName = "Barber"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "4",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 22,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 23,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 24,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 25,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 26,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 27,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 28,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 29,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 30,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Barber", "Barber")
                        .WithMany("Appointments")
                        .HasForeignKey("BarberUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Barbe__3D5E1FD2");

                    b.HasOne("Customers_DAL.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Custo__3E52440B");

                    b.Navigation("Barber");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK__Appointme__Appoi__412EB0B6");

                    b.HasOne("Customers_DAL.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Appointme__Servi__4222D4EF");

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Employee", "Employee")
                        .WithOne("Barber")
                        .HasForeignKey("Customers_DAL.Entities.Barber", "EmployeeUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Barber_User");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Customers_DAL.Entities.Customer", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__Employee__Branch__29572725");

                    b.HasOne("Customers_DAL.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Customers_DAL.Entities.Employee", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_User");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Customers_DAL.Entities.EmployeeDayOff", b =>
                {
                    b.HasOne("Customers_DAL.Entities.DayOff", "DayOff")
                        .WithMany("EmployeeDayOffs")
                        .HasForeignKey("DayOffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK__EmployeeD__DayOf__2F10007B");

                    b.HasOne("Customers_DAL.Entities.Employee", "EmployeeUser")
                        .WithMany("EmployeeDayOffs")
                        .HasForeignKey("EmployeeUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK__EmployeeD__Emplo__2E1BDC42");

                    b.Navigation("DayOff");

                    b.Navigation("EmployeeUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.DayOff", b =>
                {
                    b.Navigation("EmployeeDayOffs");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.Navigation("Barber")
                        .IsRequired();

                    b.Navigation("EmployeeDayOffs");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Customers_DAL.Entities.User", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

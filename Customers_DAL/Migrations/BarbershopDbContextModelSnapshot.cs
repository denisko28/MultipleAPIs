// <auto-generated />
using System;
using Customers_DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Customers_DAL.Migrations
{
    [DbContext(typeof(BarbershopDbContext))]
    partial class BarbershopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AS_SC_UTF8")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppDate")
                        .HasColumnType("date");

                    b.Property<int>("AppointmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("BarberUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("BeginTime")
                        .HasColumnType("time");

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BarberUserId");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("Appointment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppDate = new DateTime(2022, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 3,
                            BarberUserId = 4,
                            BeginTime = new TimeSpan(0, 12, 0, 0, 0),
                            CustomerUserId = 19,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AppDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 9,
                            BeginTime = new TimeSpan(0, 16, 0, 0, 0),
                            CustomerUserId = 16,
                            EndTime = new TimeSpan(0, 17, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AppDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 3,
                            BeginTime = new TimeSpan(0, 17, 0, 0, 0),
                            CustomerUserId = 18,
                            EndTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AppDate = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 1,
                            BarberUserId = 6,
                            BeginTime = new TimeSpan(0, 13, 30, 0, 0),
                            CustomerUserId = 22,
                            EndTime = new TimeSpan(0, 15, 15, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AppDate = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 8,
                            BeginTime = new TimeSpan(0, 16, 15, 0, 0),
                            CustomerUserId = 17,
                            EndTime = new TimeSpan(0, 17, 15, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            AppDate = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 1,
                            BarberUserId = 5,
                            BeginTime = new TimeSpan(0, 10, 0, 0, 0),
                            CustomerUserId = 21,
                            EndTime = new TimeSpan(0, 10, 15, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            AppDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 6,
                            BeginTime = new TimeSpan(0, 15, 0, 0, 0),
                            CustomerUserId = 23,
                            EndTime = new TimeSpan(0, 15, 45, 0, 0)
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentService", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 2,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 3,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 4,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 4,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 7,
                            AppointmentId = 4,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 8,
                            AppointmentId = 5,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 9,
                            AppointmentId = 6,
                            ServiceId = 6
                        },
                        new
                        {
                            Id = 10,
                            AppointmentId = 7,
                            ServiceId = 5
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.Property<int>("EmployeeUserId")
                        .HasColumnType("int");

                    b.Property<int>("ChairNum")
                        .HasColumnType("int");

                    b.HasKey("EmployeeUserId")
                        .HasName("PK_Barber_User");

                    b.ToTable("Barber", (string)null);

                    b.HasData(
                        new
                        {
                            EmployeeUserId = 3,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 4,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 5,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 6,
                            ChairNum = 4
                        },
                        new
                        {
                            EmployeeUserId = 8,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 9,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 10,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 12,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 13,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 14,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 15,
                            ChairNum = 4
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Descript")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Branch", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "вул. Банкова 12, Київ, Київська область",
                            Descript = "Barbershop Lodon(1)"
                        },
                        new
                        {
                            Id = 2,
                            Address = "вул. Героїв майдану 55, Чернівці, Чернівецька область",
                            Descript = "Barbershop Lodon(2)"
                        },
                        new
                        {
                            Id = 3,
                            Address = "вул. Степана Бандери 2-А, Львів, Львівська область",
                            Descript = "Barbershop Lodon(3)"
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VisitsNum")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK_Customer_User");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 16,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 17,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 18,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 19,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 20,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 21,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 22,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 23,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 24,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 25,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 26,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 27,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 28,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 29,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 30,
                            VisitsNum = 0
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.DayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date_");

                    b.HasKey("Id");

                    b.ToTable("DayOff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PassportImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK_Employee_User");

                    b.HasIndex("BranchId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "Бульвар незалежності 12-А, Київ, Київська область",
                            Birthday = new DateTime(1995, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 1,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 2,
                            Address = "вул. Золотоворітська 18, Київ, Київська область",
                            Birthday = new DateTime(1998, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 3,
                            Address = "вул. Дарвіна, Київ, Київська область",
                            Birthday = new DateTime(1994, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 4,
                            Address = "вул. Січових Стрільців, Київ, Київська область",
                            Birthday = new DateTime(1997, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 5,
                            Address = "вул. Івана Богуна, Київ, Київська область",
                            Birthday = new DateTime(2000, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 6,
                            Address = "вул. Татарська, Петропавлівська Борщагівка, Київська область",
                            Birthday = new DateTime(1993, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 7,
                            Address = "вул. Університетська, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1993, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 8,
                            Address = "вул. Поштова, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 9,
                            Address = "вул. Богдана Хмельницького, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1995, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 10,
                            Address = "вул. Селятинська, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1998, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 11,
                            Address = "вул. Михайлівська, Львів, Львівська область",
                            Birthday = new DateTime(1990, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 12,
                            Address = "вул. Лесі Українки, Львів, Львівська область",
                            Birthday = new DateTime(1998, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 13,
                            Address = "вул. Вірменська, Львів, Львівська область",
                            Birthday = new DateTime(1991, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 14,
                            Address = "вул. Шолом-Алейхема, Львів, Львівська область",
                            Birthday = new DateTime(1996, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 15,
                            Address = "вул. Горлівська, Львів, Львівська область",
                            Birthday = new DateTime(1996, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.EmployeeDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DayOffId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayOffId");

                    b.HasIndex("EmployeeUserId");

                    b.ToTable("EmployeeDayOff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOffId = 1,
                            EmployeeUserId = 3
                        },
                        new
                        {
                            Id = 2,
                            DayOffId = 2,
                            EmployeeUserId = 9
                        },
                        new
                        {
                            Id = 3,
                            DayOffId = 3,
                            EmployeeUserId = 14
                        },
                        new
                        {
                            Id = 4,
                            DayOffId = 4,
                            EmployeeUserId = 15
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.PossibleTime", b =>
                {
                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.HasKey("Time")
                        .HasName("PK__Possible__8E79CB0049844667");

                    b.ToTable("PossibleTime", (string)null);

                    b.HasData(
                        new
                        {
                            Time = new TimeSpan(0, 8, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 23, 0, 0, 0),
                            Available = true
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name_");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("Service_", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Duration = 60,
                            Name = "Стрижка",
                            Price = 300m
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Duration = 90,
                            Name = "Стрижка з бородою",
                            Price = 450m
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            Duration = 30,
                            Name = "Голова - камуфляж сивини",
                            Price = 200m
                        },
                        new
                        {
                            Id = 4,
                            Available = true,
                            Duration = 30,
                            Name = "Борода - камуфляж сивини",
                            Price = 150m
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            Duration = 45,
                            Name = "Дитяча стрижка",
                            Price = 200m
                        },
                        new
                        {
                            Id = 6,
                            Available = true,
                            Duration = 15,
                            Name = "Укладка",
                            Price = 100m
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            Duration = 15,
                            Name = "Королівське гоління",
                            Price = 250m
                        },
                        new
                        {
                            Id = 8,
                            Available = true,
                            Duration = 15,
                            Name = "Видалення волосся воском",
                            Price = 100m
                        },
                        new
                        {
                            Id = 9,
                            Available = false,
                            Duration = 75,
                            Name = "Чистка лиця",
                            Price = 400m
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User_", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e025221-038d-4717-83c0-d8435f331e9e",
                            EmailConfirmed = false,
                            FirstName = "Петро",
                            LastName = "Василенко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEK1wTuwdFgb8nfBGdHDGt/C7KBw3KSASYhgUANq09TqOwDqk4Ei6YoZ7XE5mvPtdgA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2d55f84-c3ed-40de-80da-a62a731056aa",
                            EmailConfirmed = false,
                            FirstName = "Іван",
                            LastName = "Григоренко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKopchMzGJbz+mlvfMcr+envh8TwfklMxMx1uxLeVFl++U5lwCBw4F13V4AJ3ifjEQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f25d2a68-789a-4ecf-a416-0e8258400f92",
                            EmailConfirmed = false,
                            FirstName = "Олександр",
                            LastName = "Шевченко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBh1GR9sgPZbVvY3Tj2LjVLKW23Jj+bdvRYFxfudwlvi4JOSX/OEbuRjaIIT34F4zw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ab7f4a4-add1-4fb6-870c-ab0f5964a5d5",
                            EmailConfirmed = false,
                            FirstName = "Роман",
                            LastName = "Добровольський",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAENlFddZxPtHUOwiuQ4S+KfgrJNePXaY85MKRMwMZSCH5cDEe9xU117mjQjbf8e5SmQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b962620-3359-489b-9978-05abdbf44751",
                            EmailConfirmed = false,
                            FirstName = "Степан",
                            LastName = "Петришко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEGhXCc7T8+oiK5OnQwrRwPOTENYdsmPwF4FskwCuShaYiRFv2idSd76Zinsz4WPhKg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8086b37-621e-4f08-aad3-fb38b2e133aa",
                            EmailConfirmed = false,
                            FirstName = "Світлана",
                            LastName = "Петришко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELgnsD0bKNz45YAU5EAoa4lX7GyNB9rqo8y3+YLZcAxl8pfXZ2g8PE8BX1gizmZBKA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1683843-7ead-4294-8795-97d53a317526",
                            EmailConfirmed = false,
                            FirstName = "Богдан",
                            LastName = "Ящук",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJgIJhTFnxIFX8glT6pgIXdRYESA1v42RgzMHnlQRYNTX2N7+6F143yOQElpk3DG0g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96bb1ee7-99bf-4250-b3a9-33c4c2e26245",
                            EmailConfirmed = false,
                            FirstName = "Валентина",
                            LastName = "Генко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEF0aMsRDy35lYGscm+8wJrP1BUZqKacpIVQnekTFcbPkv4sKVW3g+DP9zIY5nnyyYw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97c33319-e442-4139-b337-cd0d428c8493",
                            EmailConfirmed = false,
                            FirstName = "Андрій",
                            LastName = "Івашко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEYRphzAC6eDEjmhluq1KmmXSeenJ1aoW+LTb2sVqNJUHl/S5yth6Z9ExHk//OZpcw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "484031fa-5fac-4cb5-80d6-f50e57b0ae62",
                            EmailConfirmed = false,
                            FirstName = "Олександр",
                            LastName = "Ванченко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBDJnV+7PTV41tb4/b2VGEGpKRYJf+kStQFaIzF6T73xlYv7HHBHO2ACoQZFNFUuxA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User10"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4be1abd-b61b-4a4a-aa84-ee5b1ef35f35",
                            EmailConfirmed = false,
                            FirstName = "Володимир",
                            LastName = "Михайлішин",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEL8yw0doJwfY6b7vZAoInqSB6Xzch7iVgFxvKxVr0Pi794pG8dwxkqHavfxcgrYrJw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User11"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20c7b95a-b767-4581-b815-108afb9b2f28",
                            EmailConfirmed = false,
                            FirstName = "Станіслав",
                            LastName = "Жолудь",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMj4tZn46Mc2J2B3g4LAEjbovqeCsNQt4vZWczgQ5L30SJHcQQ9cQe9MsYXzWf3YhQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User12"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fe94492-816d-49df-a58f-ce6dd914b8ff",
                            EmailConfirmed = false,
                            FirstName = "Микола",
                            LastName = "Лисенко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEN5bL9Vv8R0rnqOtvPtTrQc29ozilJQYtw0WplVAUZeGl84dcviLj4mHTS/Id2lNUA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User13"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2535c01c-b612-4a50-aab0-7c9932892356",
                            EmailConfirmed = false,
                            FirstName = "Дмитро",
                            LastName = "Жовнірчук",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJdDWWsvUfKGeWsYc6wL4qqkwRK0TEWwjennG1Vq34z8GU43SWtU6Y6ybSB4Ns9ZJw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User14"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5eccffd7-9a94-4db1-89e4-f02621976dad",
                            EmailConfirmed = false,
                            FirstName = "Валентин",
                            LastName = "Федоренко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAENF31F27ByfNOD+21WaGWQ5LR8vK3lZD3aGFLvV4AFFJdH2q+c8+5RJvzFTNFB6rSQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User15"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f3dce52-f8a3-47b3-9461-ab87e1e10d52",
                            EmailConfirmed = false,
                            FirstName = "Віталій",
                            LastName = "Свистун",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELtvX90pPJ4KIUJ1UqVFJue295zISif5doa0kb9Ij4XkVpjKRWFwJ14XuZ/QS3mQkA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User16"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9b708ad-3c4f-4927-88a3-15162a302c86",
                            EmailConfirmed = false,
                            FirstName = "Інокентій",
                            LastName = "Фірташ",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEO2yX4fPD9opXKP5RZMnBdUrWEshYgVBnmgCggcAwWSD2GeRogM6XYlMJHGaA11H7w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User17"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "379c1c16-6cad-46c8-bfbe-251a506139c6",
                            EmailConfirmed = false,
                            FirstName = "Ярослав",
                            LastName = "Татарчук",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEG2bmL4LkwNayLuopXG25MByHxN3uVPuQ9yJba42EIVxqEg/vcAMbZiTeOyay8lz7A==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User18"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b83b2c10-bda8-4ecd-8818-f771b6491082",
                            EmailConfirmed = false,
                            FirstName = "Йосиф",
                            LastName = "Дмитренко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJ2OD6jKsfPKN8B2eT9bCNDcjbGKkOYasCibjDPQq1RgI4KzZ1F6lEYrUIfUdXm9xA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User19"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7f8a0ec-fd90-4b0b-a1cb-9d55a2680561",
                            EmailConfirmed = false,
                            FirstName = "Констянтин",
                            LastName = "Шарапенко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELcxkVFM0JVgcp0hl7gVM1UuYw8tvbO78Cs4QbKaIN3u15mbqKW7jl2iP2q7cD/XAA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User20"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58b82e1d-429a-4454-b9c6-106019f99d46",
                            EmailConfirmed = false,
                            FirstName = "Олег",
                            LastName = "Притула",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJoSoQslQk3Sd47bMq3t60XP5IgTL6ovCW1tE5RTWCvjxxSzT3lYar2CARPeMCIcHQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User21"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd2e9080-56b0-44cc-bd3e-cc7dff642067",
                            EmailConfirmed = false,
                            FirstName = "Анатолій",
                            LastName = "Назаренко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMiPPJ94jjVS8XfwPDbif2bpvyhSduY83q8qB7suv2uYj7pBL9pK3wHX7T/7fgdFog==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User22"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ade45d3-6c8a-45c1-baec-2ec1cd85e178",
                            EmailConfirmed = false,
                            FirstName = "Микола",
                            LastName = "Вакуленко",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEF5AIifmLwlybXqjlJGv8JuGOEwLPXw7mrS5EVEanp3rf9wYEBll5E+aDmiSDU97cQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User23"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9da36f7-663a-4a65-9c68-c0ad64497405",
                            EmailConfirmed = false,
                            FirstName = "Степан",
                            LastName = "Барабаш",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBxmXtDLhxQPA5yOGZEPq2GR6EWT7ZuIUU27bMw/whmid2OmHh/k7acOarJ8Ng/DZg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User24"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f0f9fdf-7d64-4f9c-bfcb-94632fac235b",
                            EmailConfirmed = false,
                            FirstName = "Денис",
                            LastName = "Ярема",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEZA9YMgGHrsg1uulVwzFk6QT87j5OaGAtysho2o3Fi81j0qCvjx+Y+7eCnYNX5w7w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User25"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b477606e-e4e9-4b0a-bc75-af1c927a4edf",
                            EmailConfirmed = false,
                            FirstName = "Олег",
                            LastName = "Таралевич",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMrG8J4csgPZNR4dT4GTUObMWuZtnZcXbJ5hbXTxP4n6Fc3bF1v3bwHQmzqDjNdyaA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User26"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60b47be1-f9b6-42c1-86b1-ad3e9c5c072a",
                            EmailConfirmed = false,
                            FirstName = "Сергій",
                            LastName = "Іващук",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPGJRrIpsE33+4NZdo7uOtOI8+AoItK3rx3E2oqiKXFMG9XUBhMBiuzhJgF+4/LyKg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User27"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9facd036-d866-489a-baee-9399a2634135",
                            EmailConfirmed = false,
                            FirstName = "Михайло",
                            LastName = "Компанієць",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEG0nVt78gfTGcOvyZTK4ec0O8uoq6DWapv1RUQzQ4llyj+530T83rrKIiuZYR1RbZA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User28"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7d030e1-e497-4912-b46c-15e01c5bcb69",
                            EmailConfirmed = false,
                            FirstName = "Андрій",
                            LastName = "Іващук",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMOdDoOwEC8J7rqwwzeXv+OrF6M6zrngdEMmRPpD85viBJ+dRi0LkYx6Tqo3tIpXyA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User29"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "933b54d2-3d94-4c43-abf5-1f71d4526cf6",
                            EmailConfirmed = false,
                            FirstName = "Назар",
                            LastName = "Мельник",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEKzZK1dlIduWNluuTmT/mO7TiTcakj7Jb3K0Gu4M1lFsh3nSJLZXI7l9Ep0jQQ56nQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "User30"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "3",
                            Name = "Barber",
                            NormalizedName = "Barber"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "4",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 22,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 23,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 24,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 25,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 26,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 27,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 28,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 29,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 30,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Barber", "Barber")
                        .WithMany("Appointments")
                        .HasForeignKey("BarberUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Barbe__3D5E1FD2");

                    b.HasOne("Customers_DAL.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Custo__3E52440B");

                    b.Navigation("Barber");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK__Appointme__Appoi__412EB0B6");

                    b.HasOne("Customers_DAL.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Appointme__Servi__4222D4EF");

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Employee", "Employee")
                        .WithOne("Barber")
                        .HasForeignKey("Customers_DAL.Entities.Barber", "EmployeeUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Barber_User");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Customers_DAL.Entities.Customer", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__Employee__Branch__29572725");

                    b.HasOne("Customers_DAL.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Customers_DAL.Entities.Employee", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_User");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Customers_DAL.Entities.EmployeeDayOff", b =>
                {
                    b.HasOne("Customers_DAL.Entities.DayOff", "DayOff")
                        .WithMany("EmployeeDayOffs")
                        .HasForeignKey("DayOffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK__EmployeeD__DayOf__2F10007B");

                    b.HasOne("Customers_DAL.Entities.Employee", "EmployeeUser")
                        .WithMany("EmployeeDayOffs")
                        .HasForeignKey("EmployeeUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK__EmployeeD__Emplo__2E1BDC42");

                    b.Navigation("DayOff");

                    b.Navigation("EmployeeUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.DayOff", b =>
                {
                    b.Navigation("EmployeeDayOffs");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.Navigation("Barber")
                        .IsRequired();

                    b.Navigation("EmployeeDayOffs");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Customers_DAL.Entities.User", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

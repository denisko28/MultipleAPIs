// <auto-generated />
using System;
using Customers_DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Customers_DAL.Migrations
{
    [DbContext(typeof(BarbershopDbContext))]
    partial class BarbershopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AS_SC_UTF8")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppDate")
                        .HasColumnType("date");

                    b.Property<int>("AppointmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("BarberUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("BeginTime")
                        .HasColumnType("time");

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BarberUserId");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("Appointment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppDate = new DateTime(2022, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 3,
                            BarberUserId = 4,
                            BeginTime = new TimeSpan(0, 12, 0, 0, 0),
                            CustomerUserId = 19,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AppDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 9,
                            BeginTime = new TimeSpan(0, 16, 0, 0, 0),
                            CustomerUserId = 16,
                            EndTime = new TimeSpan(0, 17, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AppDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 3,
                            BeginTime = new TimeSpan(0, 17, 0, 0, 0),
                            CustomerUserId = 18,
                            EndTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AppDate = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 1,
                            BarberUserId = 6,
                            BeginTime = new TimeSpan(0, 13, 30, 0, 0),
                            CustomerUserId = 22,
                            EndTime = new TimeSpan(0, 15, 15, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AppDate = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 8,
                            BeginTime = new TimeSpan(0, 16, 15, 0, 0),
                            CustomerUserId = 17,
                            EndTime = new TimeSpan(0, 17, 15, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            AppDate = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 1,
                            BarberUserId = 5,
                            BeginTime = new TimeSpan(0, 10, 0, 0, 0),
                            CustomerUserId = 21,
                            EndTime = new TimeSpan(0, 10, 15, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            AppDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 6,
                            BeginTime = new TimeSpan(0, 15, 0, 0, 0),
                            CustomerUserId = 23,
                            EndTime = new TimeSpan(0, 15, 45, 0, 0)
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentService", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 2,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 3,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 4,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 4,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 7,
                            AppointmentId = 4,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 8,
                            AppointmentId = 5,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 9,
                            AppointmentId = 6,
                            ServiceId = 6
                        },
                        new
                        {
                            Id = 10,
                            AppointmentId = 7,
                            ServiceId = 5
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.Property<int>("EmployeeUserId")
                        .HasColumnType("int");

                    b.Property<int>("ChairNum")
                        .HasColumnType("int");

                    b.HasKey("EmployeeUserId")
                        .HasName("PK_Barber_User");

                    b.ToTable("Barber", (string)null);

                    b.HasData(
                        new
                        {
                            EmployeeUserId = 3,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 4,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 5,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 6,
                            ChairNum = 4
                        },
                        new
                        {
                            EmployeeUserId = 8,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 9,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 10,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 12,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 13,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 14,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 15,
                            ChairNum = 4
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Descript")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Branch", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "вул. Банкова 12, Київ, Київська область",
                            Descript = "Barbershop Lodon(1)"
                        },
                        new
                        {
                            Id = 2,
                            Address = "вул. Героїв майдану 55, Чернівці, Чернівецька область",
                            Descript = "Barbershop Lodon(2)"
                        },
                        new
                        {
                            Id = 3,
                            Address = "вул. Степана Бандери 2-А, Львів, Львівська область",
                            Descript = "Barbershop Lodon(3)"
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VisitsNum")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK_Customer_User");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 16,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 17,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 18,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 19,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 20,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 21,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 22,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 23,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 24,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 25,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 26,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 27,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 28,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 29,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 30,
                            VisitsNum = 0
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.DayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date_");

                    b.HasKey("Id");

                    b.ToTable("DayOff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PassportImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK_Employee_User");

                    b.HasIndex("BranchId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "Бульвар незалежності 12-А, Київ, Київська область",
                            Birthday = new DateTime(1995, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 1,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 2,
                            Address = "вул. Золотоворітська 18, Київ, Київська область",
                            Birthday = new DateTime(1998, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 3,
                            Address = "вул. Дарвіна, Київ, Київська область",
                            Birthday = new DateTime(1994, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 4,
                            Address = "вул. Січових Стрільців, Київ, Київська область",
                            Birthday = new DateTime(1997, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 5,
                            Address = "вул. Івана Богуна, Київ, Київська область",
                            Birthday = new DateTime(2000, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 6,
                            Address = "вул. Татарська, Петропавлівська Борщагівка, Київська область",
                            Birthday = new DateTime(1993, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 7,
                            Address = "вул. Університетська, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1993, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 8,
                            Address = "вул. Поштова, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 9,
                            Address = "вул. Богдана Хмельницького, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1995, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 10,
                            Address = "вул. Селятинська, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1998, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 11,
                            Address = "вул. Михайлівська, Львів, Львівська область",
                            Birthday = new DateTime(1990, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 12,
                            Address = "вул. Лесі Українки, Львів, Львівська область",
                            Birthday = new DateTime(1998, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 13,
                            Address = "вул. Вірменська, Львів, Львівська область",
                            Birthday = new DateTime(1991, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 14,
                            Address = "вул. Шолом-Алейхема, Львів, Львівська область",
                            Birthday = new DateTime(1996, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 15,
                            Address = "вул. Горлівська, Львів, Львівська область",
                            Birthday = new DateTime(1996, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.EmployeeDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DayOffId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayOffId");

                    b.HasIndex("EmployeeUserId");

                    b.ToTable("EmployeeDayOff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOffId = 1,
                            EmployeeUserId = 3
                        },
                        new
                        {
                            Id = 2,
                            DayOffId = 2,
                            EmployeeUserId = 9
                        },
                        new
                        {
                            Id = 3,
                            DayOffId = 3,
                            EmployeeUserId = 14
                        },
                        new
                        {
                            Id = 4,
                            DayOffId = 4,
                            EmployeeUserId = 15
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.PossibleTime", b =>
                {
                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.HasKey("Time")
                        .HasName("PK__Possible__8E79CB0049844667");

                    b.ToTable("PossibleTime", (string)null);

                    b.HasData(
                        new
                        {
                            Time = new TimeSpan(0, 8, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 23, 0, 0, 0),
                            Available = true
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name_");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("Service_", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Duration = 60,
                            Name = "Стрижка",
                            Price = 300m
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Duration = 90,
                            Name = "Стрижка з бородою",
                            Price = 450m
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            Duration = 30,
                            Name = "Голова - камуфляж сивини",
                            Price = 200m
                        },
                        new
                        {
                            Id = 4,
                            Available = true,
                            Duration = 30,
                            Name = "Борода - камуфляж сивини",
                            Price = 150m
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            Duration = 45,
                            Name = "Дитяча стрижка",
                            Price = 200m
                        },
                        new
                        {
                            Id = 6,
                            Available = true,
                            Duration = 15,
                            Name = "Укладка",
                            Price = 100m
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            Duration = 15,
                            Name = "Королівське гоління",
                            Price = 250m
                        },
                        new
                        {
                            Id = 8,
                            Available = true,
                            Duration = 15,
                            Name = "Видалення волосся воском",
                            Price = 100m
                        },
                        new
                        {
                            Id = 9,
                            Available = false,
                            Duration = 75,
                            Name = "Чистка лиця",
                            Price = 400m
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User_", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "254a3ba6-328c-4f52-b975-192b4c07fa3c",
                            Email = "User1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Петро",
                            LastName = "Василенко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBbZrKmKPbL12IDAut1pjZbCw5HXk4S1Ai5KFIAg5dXWl2AkwQXgMvBQpoFvwRqEgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b9361f9-27f9-42f3-869d-96078898bafd",
                            TwoFactorEnabled = false,
                            UserName = "User1@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1043c3d-bdb4-4311-94ee-0f3dec3027ce",
                            Email = "User2@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Іван",
                            LastName = "Григоренко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER2@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMQe2IsxZ8fA5U6wU6BPVaYoRVVKCjp06LmUwPNr4iEMLcmGKRyD60gHNdByNoZFuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0edca097-c3a4-4af2-8bb2-c0561d143461",
                            TwoFactorEnabled = false,
                            UserName = "User2@outlook.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0489fdbc-a4ca-4037-ba84-846a5eb05cdd",
                            Email = "User3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Олександр",
                            LastName = "Шевченко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEJynTSiQTrlAH7yOuqww4qDPYJLBgC9w+4N3v28UTTaAwjFnbhmbToWurVyTAEhMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "358528c9-f3d6-47e5-a8ac-b5539b9c6483",
                            TwoFactorEnabled = false,
                            UserName = "User3@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3ad8ec7-c001-4c3c-b5ae-1f47a3191767",
                            Email = "User4@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Роман",
                            LastName = "Добровольський",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER4@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGTo2kocxxbJMO/qTesElla72NfDjyW6ObnhiE+x+xoub2XRkY7G3Ir7T392kWVLPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "514f5a7c-2f63-4718-b73f-d30795c2e0aa",
                            TwoFactorEnabled = false,
                            UserName = "User4@outlook.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf69e21b-9a07-4dfa-8a63-cfb249625661",
                            Email = "User5@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Степан",
                            LastName = "Петришко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER5@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFQsOKAh652NHpks8yqzZMVVymNSrVlGSrfg+EQnnnzNssr4fhhECKodV77YIjFLtQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb5a0299-0287-4f0d-8b22-fbd9f38cd73e",
                            TwoFactorEnabled = false,
                            UserName = "User5@outlook.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ec62d7a-dbfa-44fe-9a03-3f6d83e5b7c6",
                            Email = "User6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Світлана",
                            LastName = "Петришко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMQxu9i6t77iN1M+8N4PtoDca2b1iJ0NV3+DNAA0XET1/lmZFuOdf2gSfSInoNKOoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "434fec43-3021-4664-8876-7a1cfaa29b94",
                            TwoFactorEnabled = false,
                            UserName = "User6@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02a6e7d2-fb96-4ee2-a26c-fee0210d1675",
                            Email = "User7@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Богдан",
                            LastName = "Ящук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER7@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKaqxjYdmZTGlZVPMKgFpb8hL/rJkv0DQAiawBghZqvC7JOEI14AKMh+anpWxq13Wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bec9bd07-38b9-4165-823a-ee83abe4eac6",
                            TwoFactorEnabled = false,
                            UserName = "User7@yahoo.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37ca32fc-7ac4-4bf4-b8e6-c7ddc4ec1daf",
                            Email = "User8@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Валентина",
                            LastName = "Генко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER8@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDHahBT4kD3YXBk9HBbBU8LyMbzNgQ5oA9mWEGW/G+DubD8hDG+vJNJab1i9cPVhAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "748447ad-c224-4567-88a0-556f711bfbd5",
                            TwoFactorEnabled = false,
                            UserName = "User8@outlook.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c1449a0-6b6d-4cc2-bf71-60cb1b56c1c0",
                            Email = "User9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Андрій",
                            LastName = "Івашко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER9@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECuavHYHhH00OS+KKmFZZdyBvTpQL019OuPshV8asins1pNi6JjU1BRYsVfnBCJCDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57c9b06c-cbae-47b2-9113-f1e7cd6fa088",
                            TwoFactorEnabled = false,
                            UserName = "User9@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75a16fb4-7671-4ee1-b79e-0723698cac39",
                            Email = "User10@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Олександр",
                            LastName = "Ванченко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER10@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKyfsOURp11+iTENVKI2x8zCBGlb/PKYrwsY6o0hssbnkTqGcREe+ed3ZQRdDxVUYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c60941b9-c4d6-4405-bae4-6abb61e9394d",
                            TwoFactorEnabled = false,
                            UserName = "User10@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49050d5e-140c-4e90-86bf-7e5ddf66f998",
                            Email = "User11@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Володимир",
                            LastName = "Михайлішин",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER11@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEAmZEl6fnlaCb2osOS/NHvOPD7mX+iRqVDLD0P78Rd+wUiPYlIBhfCEVUxOR2AsnbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5385e731-00ff-41ab-847a-4c92d4581136",
                            TwoFactorEnabled = false,
                            UserName = "User11@ukr.net"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3dcb08a6-c2ef-4e8f-a4f7-25167e05cb5a",
                            Email = "User12@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Станіслав",
                            LastName = "Жолудь",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER12@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDPe8T2Uvx0bbleWjQBEDqBVoy/zPSitbTzb2qc5eGAV/fv/4WYBfwOLUvfVJfW+XQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bec157e2-162d-4aa5-971d-3c2ae19bf6cb",
                            TwoFactorEnabled = false,
                            UserName = "User12@outlook.com"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ea6a975-e530-40f9-94f5-578070ffe437",
                            Email = "User13@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Микола",
                            LastName = "Лисенко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER13@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA76QuwheAhcSHDx+2HxT06RV0JgrrRRQDLYdu2EJs9I/n/RtBgzG62noR3XlEg1tA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8449f38-e456-4f45-a9db-34de9f85ba96",
                            TwoFactorEnabled = false,
                            UserName = "User13@gmail.com"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1687716-634f-4ca4-97f7-be95ec59352d",
                            Email = "User14@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Дмитро",
                            LastName = "Жовнірчук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER14@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN3c17+4SxScuBj4h3M1MWMnqMpt4e+vwNVYoYEiux9RRaMqZcf/64T+M7jGd56ABg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "41be8b95-e833-479f-a08b-416342ccb212",
                            TwoFactorEnabled = false,
                            UserName = "User14@outlook.com"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07860f72-d874-4eca-8b89-69d8090f0f7f",
                            Email = "User15@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Валентин",
                            LastName = "Федоренко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER15@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEEzhC6D38YVEHYyCqXNGZnO6Z2xbj3WpkfGARnO+cwhLdryTUeKLT7HSQdCg0gZrbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10037f92-4910-4d12-935f-a23d35a0282a",
                            TwoFactorEnabled = false,
                            UserName = "User15@ukr.net"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32ddbd64-87b8-41df-ad13-9d3370356089",
                            Email = "User16@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Віталій",
                            LastName = "Свистун",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER16@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ8oWH6CVdfledpq8OdcIBOPDcN0BHs8U20pR78VIeI714V5YqWB4yj5kHiTsUaVEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4cf9928e-7239-4296-a34f-109409f2eada",
                            TwoFactorEnabled = false,
                            UserName = "User16@gmail.com"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d415343-6a6f-4041-9001-278f2442f288",
                            Email = "User17@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Інокентій",
                            LastName = "Фірташ",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER17@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFIsijwNfDiSXQN2JTdyBZ1m1PNHejfBLxYXLg74hMo2uWNQy9/T+vow8WwG2Lx6EQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d52f050-7639-4d95-aa26-e9f17d3311a3",
                            TwoFactorEnabled = false,
                            UserName = "User17@gmail.com"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b150f8f1-2a5e-4b06-9f4a-8a915ee89cc0",
                            Email = "User18@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ярослав",
                            LastName = "Татарчук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER18@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFVAB/vW+FcZfkQPr7ZRCGPlbPsMdh3s2bAkW7FN2kKshPh0vVXWqmWh3RiDbNGx6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24efed93-2052-48ba-b581-fbedd64252c9",
                            TwoFactorEnabled = false,
                            UserName = "User18@gmail.com"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52258038-cefc-4865-858f-1b6c9146a4e2",
                            Email = "User19@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Йосиф",
                            LastName = "Дмитренко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER19@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEBhYP254lKhr1ULAEY39VdJ/YqkHJxIkipZ0t01Goku3xNgX83ej9Q212e5QegHzVA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b57b161-d1d1-45a0-bdd6-491f3bf45197",
                            TwoFactorEnabled = false,
                            UserName = "User19@ukr.net"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5cedde35-38d5-4935-b551-4a6c39020430",
                            Email = "User20@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Констянтин",
                            LastName = "Шарапенко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER20@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEOR/NdrYACkVv3imcMlwK9aRQyiZuo48DkdtPQIfR4S3OpeXl/xf7+IjHt6Zs3O6KQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98440750-b45a-40ae-9db1-c22a411ab91e",
                            TwoFactorEnabled = false,
                            UserName = "User20@ukr.net"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30a66ea3-cf9e-493c-86a1-a75a3bc8bb29",
                            Email = "User21@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Олег",
                            LastName = "Притула",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER21@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOK0YYGyrrYVJJoTRtGgh5Iuz7xaBA/uQq/3sMhBaBbMYa8+jeTEkg5HyBR4L7491Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b093959-189e-48a1-92b4-a8db036fc304",
                            TwoFactorEnabled = false,
                            UserName = "User21@outlook.com"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5576b17a-af5e-479d-a7f2-060573d1c7a1",
                            Email = "User22@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Анатолій",
                            LastName = "Назаренко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER22@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHw7MYAuBHyScRzNfYHbH22iB+Y1yo65O3Dcwu5kcXSOliYgbDIuQ8nj4NtwceUTpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5453592d-3fb9-4860-aa45-0a36ad0121e5",
                            TwoFactorEnabled = false,
                            UserName = "User22@gmail.com"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5dcb8f96-0f71-4504-981b-6c5693d402ff",
                            Email = "User23@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Микола",
                            LastName = "Вакуленко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER23@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEKaYLjWhh11XqDxuZHHb/8fnrcFG2Uji4xbT6R+tIO7veKbO4n2EKoccGmLtKYf+QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cdc0abc8-9f8e-405d-bddf-3af5529721e4",
                            TwoFactorEnabled = false,
                            UserName = "User23@ukr.net"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef02c8da-0444-4db8-9af0-4abb857cea33",
                            Email = "User24@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Степан",
                            LastName = "Барабаш",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER24@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDMLxOrrguQCrppuUgBEzrCwUXRR6L690n2oN8GSbZ1xyExSiHVs+0QUch48BGAthg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92a348ea-0b63-41d7-8ee0-dd2905bcf7c2",
                            TwoFactorEnabled = false,
                            UserName = "User24@outlook.com"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34ce3a26-418f-44e2-9e99-ca7a6781ead7",
                            Email = "User25@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Денис",
                            LastName = "Ярема",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER25@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEdFHhL+gyNo8W8GDHbsTH73/562muLitWQF/qGgh4ACPpu+rVB5pCcgwFpC0bUakg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c526db93-a72e-46d5-8019-7746939f7335",
                            TwoFactorEnabled = false,
                            UserName = "User25@gmail.com"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9124f09-8599-4fd6-9ab7-db3295c1a8c1",
                            Email = "User26@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Олег",
                            LastName = "Таралевич",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER26@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEFZ3Iwti7IpX5+R3WUcje3mG+fP4ylEN97t4ajgzSniMnAhKXqq9ZPbvNTtybqGkig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69c51cca-5d56-453e-ab6f-6d4c7f92d214",
                            TwoFactorEnabled = false,
                            UserName = "User26@ukr.net"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75c422ef-66df-4275-a234-7d0347dff02c",
                            Email = "User27@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Сергій",
                            LastName = "Іващук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER27@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIGZQUf6X7mihqJkUrl+l4BRgdc30IdktWMGhIpkyn68e4wpJ7G/0gdET3XzlXmT8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0499369-3ac3-4f0a-9d08-ce749d4ef05b",
                            TwoFactorEnabled = false,
                            UserName = "User27@gmail.com"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f7b26f5-52ac-43d0-b49d-ad0f413b229a",
                            Email = "User28@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Михайло",
                            LastName = "Компанієць",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER28@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOqPBby1EnlrNpChSWFc+8iqPQORZv1wlH/TbwoGpFzy6vLgCkGfyxu36ZWVmZoWUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ce883a9-5cb5-4df6-a5d6-270bb2b23fa5",
                            TwoFactorEnabled = false,
                            UserName = "User28@yahoo.com"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eeb510ee-6ab1-4f9a-9b3f-570835446ee8",
                            Email = "User29@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Андрій",
                            LastName = "Іващук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER29@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN3/SY7fZzLV22PhRjhAO1JT+/NU45IQHfiFAEyDCzW8ttUXxe72AOT8ObUnwXHjug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2a761ef-13a6-448c-b039-e6aa2b4a1dc5",
                            TwoFactorEnabled = false,
                            UserName = "User29@outlook.com"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de9365f5-1f1b-4fde-9beb-ae877367b3b0",
                            Email = "User30@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Назар",
                            LastName = "Мельник",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER30@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPMoS5Jyp+Brf4Ki6Rolpqg7JJ9HN3sXzNtu1wOB4OJa/WPwiGtAljC4K+MxiJvVZw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73aa9960-54cb-4b11-9363-5d7cae9e0050",
                            TwoFactorEnabled = false,
                            UserName = "User30@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "3",
                            Name = "Barber",
                            NormalizedName = "Barber"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "4",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 22,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 23,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 24,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 25,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 26,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 27,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 28,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 29,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 30,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Barber", "Barber")
                        .WithMany("Appointments")
                        .HasForeignKey("BarberUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Barbe__3D5E1FD2");

                    b.HasOne("Customers_DAL.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Custo__3E52440B");

                    b.Navigation("Barber");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Appointme__Appoi__412EB0B6");

                    b.HasOne("Customers_DAL.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Appointme__Servi__4222D4EF");

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Employee", "Employee")
                        .WithOne("Barber")
                        .HasForeignKey("Customers_DAL.Entities.Barber", "EmployeeUserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Barber_User");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Customers_DAL.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Customer_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Employee__Branch__29572725");

                    b.HasOne("Customers_DAL.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Customers_DAL.Entities.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_User");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Customers_DAL.Entities.EmployeeDayOff", b =>
                {
                    b.HasOne("Customers_DAL.Entities.DayOff", "DayOff")
                        .WithMany("EmployeeDayOffs")
                        .HasForeignKey("DayOffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK__EmployeeD__DayOf__2F10007B");

                    b.HasOne("Customers_DAL.Entities.Employee", "EmployeeUser")
                        .WithMany("EmployeeDayOffs")
                        .HasForeignKey("EmployeeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__EmployeeD__Emplo__2E1BDC42");

                    b.Navigation("DayOff");

                    b.Navigation("EmployeeUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.DayOff", b =>
                {
                    b.Navigation("EmployeeDayOffs");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.Navigation("Barber")
                        .IsRequired();

                    b.Navigation("EmployeeDayOffs");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Customers_DAL.Entities.User", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

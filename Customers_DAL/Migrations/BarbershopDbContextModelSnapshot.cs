// <auto-generated />
using System;
using Customers_DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Customers_DAL.Migrations
{
    [DbContext(typeof(BarbershopDbContext))]
    partial class BarbershopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AS_SC_UTF8")
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppDate")
                        .HasColumnType("date");

                    b.Property<int>("AppointmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("BarberUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("BeginTime")
                        .HasColumnType("time");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("Appointment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppDate = new DateTime(2022, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 3,
                            BarberUserId = 4,
                            BeginTime = new TimeSpan(0, 12, 0, 0, 0),
                            BranchId = 1,
                            CustomerUserId = 19,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AppDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 9,
                            BeginTime = new TimeSpan(0, 16, 0, 0, 0),
                            BranchId = 2,
                            CustomerUserId = 16,
                            EndTime = new TimeSpan(0, 17, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AppDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 3,
                            BeginTime = new TimeSpan(0, 17, 0, 0, 0),
                            BranchId = 1,
                            CustomerUserId = 18,
                            EndTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AppDate = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 1,
                            BarberUserId = 6,
                            BeginTime = new TimeSpan(0, 13, 30, 0, 0),
                            BranchId = 1,
                            CustomerUserId = 22,
                            EndTime = new TimeSpan(0, 15, 15, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AppDate = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 8,
                            BeginTime = new TimeSpan(0, 16, 15, 0, 0),
                            BranchId = 2,
                            CustomerUserId = 17,
                            EndTime = new TimeSpan(0, 17, 15, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            AppDate = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 1,
                            BarberUserId = 5,
                            BeginTime = new TimeSpan(0, 10, 0, 0, 0),
                            BranchId = 1,
                            CustomerUserId = 21,
                            EndTime = new TimeSpan(0, 10, 15, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            AppDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 6,
                            BeginTime = new TimeSpan(0, 15, 0, 0, 0),
                            BranchId = 1,
                            CustomerUserId = 23,
                            EndTime = new TimeSpan(0, 15, 45, 0, 0)
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentService", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 2,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 3,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 4,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 4,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 7,
                            AppointmentId = 4,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 8,
                            AppointmentId = 5,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 9,
                            AppointmentId = 6,
                            ServiceId = 6
                        },
                        new
                        {
                            Id = 10,
                            AppointmentId = 7,
                            ServiceId = 5
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Descript")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Branch", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "вул. Банкова 12, Київ, Київська область",
                            Descript = "Barbershop Lodon(1)"
                        },
                        new
                        {
                            Id = 2,
                            Address = "вул. Героїв майдану 55, Чернівці, Чернівецька область",
                            Descript = "Barbershop Lodon(2)"
                        },
                        new
                        {
                            Id = 3,
                            Address = "вул. Степана Бандери 2-А, Львів, Львівська область",
                            Descript = "Barbershop Lodon(3)"
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VisitsNum")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK_Customer_User");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 16,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 17,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 18,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 19,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 20,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 21,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 22,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 23,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 24,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 25,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 26,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 27,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 28,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 29,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 30,
                            VisitsNum = 0
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.PossibleTime", b =>
                {
                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.HasKey("Time")
                        .HasName("PK__Possible__8E79CB0049844667");

                    b.ToTable("PossibleTime", (string)null);

                    b.HasData(
                        new
                        {
                            Time = new TimeSpan(0, 8, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 23, 0, 0, 0),
                            Available = true
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("Service", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Duration = 60,
                            Name = "Стрижка",
                            Price = 300m
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Duration = 90,
                            Name = "Стрижка з бородою",
                            Price = 450m
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            Duration = 30,
                            Name = "Голова - камуфляж сивини",
                            Price = 200m
                        },
                        new
                        {
                            Id = 4,
                            Available = true,
                            Duration = 30,
                            Name = "Борода - камуфляж сивини",
                            Price = 150m
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            Duration = 45,
                            Name = "Дитяча стрижка",
                            Price = 200m
                        },
                        new
                        {
                            Id = 6,
                            Available = true,
                            Duration = 15,
                            Name = "Укладка",
                            Price = 100m
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            Duration = 15,
                            Name = "Королівське гоління",
                            Price = 250m
                        },
                        new
                        {
                            Id = 8,
                            Available = true,
                            Duration = 15,
                            Name = "Видалення волосся воском",
                            Price = 100m
                        },
                        new
                        {
                            Id = 9,
                            Available = false,
                            Duration = 75,
                            Name = "Чистка лиця",
                            Price = 400m
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Branch", "Branch")
                        .WithMany("Appointments")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Branch");

                    b.HasOne("Customers_DAL.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Custo__3E52440B");

                    b.Navigation("Branch");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Appointme__Appoi__412EB0B6");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}

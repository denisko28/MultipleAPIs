// <auto-generated />
using System;
using Customers_DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Customers_DAL.Migrations
{
    [DbContext(typeof(BarbershopDbContext))]
    [Migration("20220705154006_ProceduresMigration")]
    partial class ProceduresMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AS_SC_UTF8")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppDate")
                        .HasColumnType("date");

                    b.Property<int>("AppointmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("BarberUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("BeginTime")
                        .HasColumnType("time");

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BarberUserId");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("Appointment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppDate = new DateTime(2022, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 3,
                            BarberUserId = 4,
                            BeginTime = new TimeSpan(0, 12, 0, 0, 0),
                            CustomerUserId = 19,
                            EndTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AppDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 9,
                            BeginTime = new TimeSpan(0, 16, 0, 0, 0),
                            CustomerUserId = 16,
                            EndTime = new TimeSpan(0, 17, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AppDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 3,
                            BeginTime = new TimeSpan(0, 17, 0, 0, 0),
                            CustomerUserId = 18,
                            EndTime = new TimeSpan(0, 18, 30, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AppDate = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 1,
                            BarberUserId = 6,
                            BeginTime = new TimeSpan(0, 13, 30, 0, 0),
                            CustomerUserId = 22,
                            EndTime = new TimeSpan(0, 15, 15, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AppDate = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 8,
                            BeginTime = new TimeSpan(0, 16, 15, 0, 0),
                            CustomerUserId = 17,
                            EndTime = new TimeSpan(0, 17, 15, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            AppDate = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 1,
                            BarberUserId = 5,
                            BeginTime = new TimeSpan(0, 10, 0, 0, 0),
                            CustomerUserId = 21,
                            EndTime = new TimeSpan(0, 10, 15, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            AppDate = new DateTime(2022, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentStatusId = 2,
                            BarberUserId = 6,
                            BeginTime = new TimeSpan(0, 15, 0, 0, 0),
                            CustomerUserId = 23,
                            EndTime = new TimeSpan(0, 15, 45, 0, 0)
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentService", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 2,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 3,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 4,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 4,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 7,
                            AppointmentId = 4,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 8,
                            AppointmentId = 5,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 9,
                            AppointmentId = 6,
                            ServiceId = 6
                        },
                        new
                        {
                            Id = 10,
                            AppointmentId = 7,
                            ServiceId = 5
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.Property<int>("EmployeeUserId")
                        .HasColumnType("int");

                    b.Property<int>("ChairNum")
                        .HasColumnType("int");

                    b.HasKey("EmployeeUserId")
                        .HasName("PK_Barber_User");

                    b.ToTable("Barber", (string)null);

                    b.HasData(
                        new
                        {
                            EmployeeUserId = 3,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 4,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 5,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 6,
                            ChairNum = 4
                        },
                        new
                        {
                            EmployeeUserId = 8,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 9,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 10,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 12,
                            ChairNum = 1
                        },
                        new
                        {
                            EmployeeUserId = 13,
                            ChairNum = 2
                        },
                        new
                        {
                            EmployeeUserId = 14,
                            ChairNum = 3
                        },
                        new
                        {
                            EmployeeUserId = 15,
                            ChairNum = 4
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Descript")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Branch", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "вул. Банкова 12, Київ, Київська область",
                            Descript = "Barbershop Lodon(1)"
                        },
                        new
                        {
                            Id = 2,
                            Address = "вул. Героїв майдану 55, Чернівці, Чернівецька область",
                            Descript = "Barbershop Lodon(2)"
                        },
                        new
                        {
                            Id = 3,
                            Address = "вул. Степана Бандери 2-А, Львів, Львівська область",
                            Descript = "Barbershop Lodon(3)"
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VisitsNum")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK_Customer_User");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 16,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 17,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 18,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 19,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 20,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 21,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 22,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 23,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 24,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 25,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 26,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 27,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 28,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 29,
                            VisitsNum = 0
                        },
                        new
                        {
                            UserId = 30,
                            VisitsNum = 0
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.DayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date_");

                    b.HasKey("Id");

                    b.ToTable("DayOff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PassportImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK_Employee_User");

                    b.HasIndex("BranchId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "Бульвар незалежності 12-А, Київ, Київська область",
                            Birthday = new DateTime(1995, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 1,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 2,
                            Address = "вул. Золотоворітська 18, Київ, Київська область",
                            Birthday = new DateTime(1998, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 3,
                            Address = "вул. Дарвіна, Київ, Київська область",
                            Birthday = new DateTime(1994, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 4,
                            Address = "вул. Січових Стрільців, Київ, Київська область",
                            Birthday = new DateTime(1997, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 5,
                            Address = "вул. Івана Богуна, Київ, Київська область",
                            Birthday = new DateTime(2000, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 6,
                            Address = "вул. Татарська, Петропавлівська Борщагівка, Київська область",
                            Birthday = new DateTime(1993, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 7,
                            Address = "вул. Університетська, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1993, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 8,
                            Address = "вул. Поштова, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 9,
                            Address = "вул. Богдана Хмельницького, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1995, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 10,
                            Address = "вул. Селятинська, Чернівці, Чернівецька область",
                            Birthday = new DateTime(1998, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 11,
                            Address = "вул. Михайлівська, Львів, Львівська область",
                            Birthday = new DateTime(1990, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 2,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 12,
                            Address = "вул. Лесі Українки, Львів, Львівська область",
                            Birthday = new DateTime(1998, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 13,
                            Address = "вул. Вірменська, Львів, Львівська область",
                            Birthday = new DateTime(1991, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 14,
                            Address = "вул. Шолом-Алейхема, Львів, Львівська область",
                            Birthday = new DateTime(1996, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        },
                        new
                        {
                            UserId = 15,
                            Address = "вул. Горлівська, Львів, Львівська область",
                            Birthday = new DateTime(1996, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EmployeeStatusId = 3,
                            PassportImgPath = ""
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.EmployeeDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DayOffId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayOffId");

                    b.HasIndex("EmployeeUserId");

                    b.ToTable("EmployeeDayOff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayOffId = 1,
                            EmployeeUserId = 3
                        },
                        new
                        {
                            Id = 2,
                            DayOffId = 2,
                            EmployeeUserId = 9
                        },
                        new
                        {
                            Id = 3,
                            DayOffId = 3,
                            EmployeeUserId = 14
                        },
                        new
                        {
                            Id = 4,
                            DayOffId = 4,
                            EmployeeUserId = 15
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.PossibleTime", b =>
                {
                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.HasKey("Time")
                        .HasName("PK__Possible__8E79CB0049844667");

                    b.ToTable("PossibleTime", (string)null);

                    b.HasData(
                        new
                        {
                            Time = new TimeSpan(0, 8, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 8, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 9, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 10, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 11, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 12, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 13, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 14, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 15, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 16, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 17, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 18, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 19, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 20, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 21, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 0, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 15, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 30, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 22, 45, 0, 0),
                            Available = true
                        },
                        new
                        {
                            Time = new TimeSpan(0, 23, 0, 0, 0),
                            Available = true
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name_");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("Service_", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Duration = 60,
                            Name = "Стрижка",
                            Price = 300m
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Duration = 90,
                            Name = "Стрижка з бородою",
                            Price = 450m
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            Duration = 30,
                            Name = "Голова - камуфляж сивини",
                            Price = 200m
                        },
                        new
                        {
                            Id = 4,
                            Available = true,
                            Duration = 30,
                            Name = "Борода - камуфляж сивини",
                            Price = 150m
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            Duration = 45,
                            Name = "Дитяча стрижка",
                            Price = 200m
                        },
                        new
                        {
                            Id = 6,
                            Available = true,
                            Duration = 15,
                            Name = "Укладка",
                            Price = 100m
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            Duration = 15,
                            Name = "Королівське гоління",
                            Price = 250m
                        },
                        new
                        {
                            Id = 8,
                            Available = true,
                            Duration = 15,
                            Name = "Видалення волосся воском",
                            Price = 100m
                        },
                        new
                        {
                            Id = 9,
                            Available = false,
                            Duration = 75,
                            Name = "Чистка лиця",
                            Price = 400m
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.ServiceDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountSize")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceDiscount", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 2,
                            DiscountSize = 20,
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            DiscountSize = 15,
                            ServiceId = 3
                        });
                });

            modelBuilder.Entity("Customers_DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User_", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "069dd3d3-fbf8-46ba-8c17-5540dfe8768e",
                            Email = "User1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Петро",
                            LastName = "Василенко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH9ROpp3D2goNVX6SAFLkMGpWko60fknLamIxPcEmow4Fs4lx0PsfHY+8fyce4PHXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18b2b2a1-9d9e-4b4c-bee6-8f6df433888d",
                            TwoFactorEnabled = false,
                            UserName = "User1@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b55bcf3f-9097-439b-b87d-ea183cdc20dd",
                            Email = "User2@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Іван",
                            LastName = "Григоренко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER2@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEVIDvlWO3Nqb3kyN+t0QHrwEAhGhpzPsMXQToe5sOwqt2mo237Htj3gKPl1yeBiqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36fe507e-13fe-4b10-90ce-8e04f475c104",
                            TwoFactorEnabled = false,
                            UserName = "User2@outlook.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9573a927-fa5c-4803-acd4-518f42f8825f",
                            Email = "User3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Олександр",
                            LastName = "Шевченко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOafbCN5XN5Twd+k/6klStbllQVvVl5m/kSYesay246WYZd1fGbdZkIbzkDG5yBIdg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5062e28-4584-4f2d-9b36-2e2129516686",
                            TwoFactorEnabled = false,
                            UserName = "User3@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a892395f-e8fe-4681-ab7c-4d69dcbaeb88",
                            Email = "User4@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Роман",
                            LastName = "Добровольський",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER4@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKHcX3SWwiBWOKOSQOK1qnLm63ykF8o8L3QHkNB9dLQMPv2+NNihAsNHyWSZg/PGEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f3270c8-2a7e-4364-971d-2636e5a2ea60",
                            TwoFactorEnabled = false,
                            UserName = "User4@outlook.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e21d803c-5292-46a9-bff2-0bc66e4177cb",
                            Email = "User5@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Степан",
                            LastName = "Петришко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER5@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELA+pdilhsoT80O34JDlpUK/DjLKlnW/sn3+adn6HW/wMTdv9/H/lF8QOchTxEVL6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21070178-878b-4792-90e8-f1349b145126",
                            TwoFactorEnabled = false,
                            UserName = "User5@outlook.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47c52fd2-534c-4eb6-9c9d-50c1e6b129e4",
                            Email = "User6@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Світлана",
                            LastName = "Петришко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER6@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL/J5djNmMuuTFId4TNcsVrmRpoI6BGsLT/F61Mis0HmqZibD35XN3MYfHRpSn9K9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d396c55-6844-444b-9d12-b979cfd25c2d",
                            TwoFactorEnabled = false,
                            UserName = "User6@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6a618fd-e275-4bc8-8a00-6cd380251606",
                            Email = "User7@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Богдан",
                            LastName = "Ящук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER7@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIAJRvjfpTJ13W7C4anuhtb5QEZP7UFdOhUOFwDwwimN1fXm9x06r4iEVWNBd1MYCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68625d70-46c6-4eb8-9f93-a492e35f801f",
                            TwoFactorEnabled = false,
                            UserName = "User7@yahoo.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "849a722e-4636-4204-9832-17b4d307f484",
                            Email = "User8@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Валентина",
                            LastName = "Генко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER8@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFcTckuoMvk0f2Dk9Ft/JeSvaDT2vzmMGlWfG005Kpkkr9tCXuPPNJpQ/3WkrIHjag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8666accd-3572-4547-8ea0-4005d55acf5a",
                            TwoFactorEnabled = false,
                            UserName = "User8@outlook.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5adf899-9b37-4353-9f2a-c43abd9c0c35",
                            Email = "User9@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Андрій",
                            LastName = "Івашко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER9@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAIGaOs/mQFwcZVDIFpWqUCU3XdEgtCJlavjidePc1VBAqDTNfxtBV7IZvXtkJYDWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c26e48e-b83e-477c-9b7e-1fd295b4817f",
                            TwoFactorEnabled = false,
                            UserName = "User9@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6638fb90-1b32-40d4-80a8-67eb56d93698",
                            Email = "User10@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Олександр",
                            LastName = "Ванченко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER10@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAE6WzWnxtYADAIaOH3bn16a2I4rrYuboQpBoF4nx9xuTsSftcoPQ/EGZHF6CD3RBw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5fe1fbee-4374-4574-ac04-ec4a7841ded8",
                            TwoFactorEnabled = false,
                            UserName = "User10@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cda4e09d-b163-4ea1-85f0-536638463af1",
                            Email = "User11@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Володимир",
                            LastName = "Михайлішин",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER11@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEOA4n1wNJA9EP825vkAeQq0o49aNy7KP4oESzubMHsoKWS82G6ZOFZ3L9wQvdhnBSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "310db1a0-e6a3-4e22-97fb-0169b2a4753e",
                            TwoFactorEnabled = false,
                            UserName = "User11@ukr.net"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aab862dc-b572-4519-8b8d-8b6a359c6df1",
                            Email = "User12@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Станіслав",
                            LastName = "Жолудь",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER12@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC5DQ6ko9WBaA6YTrJ/DtSQiLJDvRfZXpTcxITq51arikBMgKNLOcfZeVcJ+3wSfhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db2bf284-5554-4ac8-ad81-671e0616b186",
                            TwoFactorEnabled = false,
                            UserName = "User12@outlook.com"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df086a8c-18f6-4ed9-8f65-98faea0072f6",
                            Email = "User13@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Микола",
                            LastName = "Лисенко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER13@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJcDXc6A6JhkbXl+XwAYeO/WVnj3Jy4ZJNqnffRWn1Pht6l8/DM7ja7IOySBmrZcGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d364bacd-c1aa-4812-b495-4d6d111c0ae8",
                            TwoFactorEnabled = false,
                            UserName = "User13@gmail.com"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75173821-00ff-4503-b225-0a30af2992cc",
                            Email = "User14@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Дмитро",
                            LastName = "Жовнірчук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER14@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDpJy9wBxgez8YT2HlIELGSPp16I+v+EwS4SrHwbXuwP92vhm6A32KxmHROpDt4Cxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0a0badf-9366-467e-8d77-1dd45a6a1a0a",
                            TwoFactorEnabled = false,
                            UserName = "User14@outlook.com"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fea15ab9-14a4-48d3-aea9-9cfa1d6a3171",
                            Email = "User15@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Валентин",
                            LastName = "Федоренко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER15@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEDjOLXf5LGcl3Q2pisVDOMdDh2TQV+wZr8jwYCkNby3Ipi0oq5JPfjRkdqzP3QyVGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "895b4b96-49ee-48ad-ad24-9768b21962f4",
                            TwoFactorEnabled = false,
                            UserName = "User15@ukr.net"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d0fa954-2f45-4ecc-8143-80367cd82afc",
                            Email = "User16@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Віталій",
                            LastName = "Свистун",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER16@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE+kDEQ74qv2/gl+/q12SClGxBa5tfY7dairzOUIGsR0KYOPNEMTqCr2noD3ICgeNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b97a0e7-8b23-4913-96c5-714b9ee344d5",
                            TwoFactorEnabled = false,
                            UserName = "User16@gmail.com"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7aca1ad-d551-4573-a94c-a0313d57cac1",
                            Email = "User17@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Інокентій",
                            LastName = "Фірташ",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER17@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN8WDMFh0tfFPuJuUvwC9VQ3jLV58nQiT08av8YnD88n604e5Z06/JvjTI44zMdwag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "770aa13a-6a1c-4443-858f-582fbfc83d16",
                            TwoFactorEnabled = false,
                            UserName = "User17@gmail.com"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e71bec2f-4145-4f08-a189-2ed69ad3df2d",
                            Email = "User18@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ярослав",
                            LastName = "Татарчук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER18@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE/tvJik+9A1YbkrVCQr9yanjX6gQaqmKAlnptkX316fSe82OKfAc6UzZrAcjY2O1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "519bfbcd-9792-423a-84e4-11b97b082812",
                            TwoFactorEnabled = false,
                            UserName = "User18@gmail.com"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abb525c3-6ca8-4dac-aec6-bb3e4e437d6d",
                            Email = "User19@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Йосиф",
                            LastName = "Дмитренко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER19@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEItDbeJj0q9LdYf9KREbccrbxrFEb2yjUI934uF+qmU3R0oZ7ODOds94TCw9oyPREA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d1404bc-e201-494a-b83e-4fae0113599a",
                            TwoFactorEnabled = false,
                            UserName = "User19@ukr.net"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fc932d1-f105-4755-bd33-ff6f983a0e5e",
                            Email = "User20@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Констянтин",
                            LastName = "Шарапенко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER20@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEN+Mhiwfsu89JC+dmKekWyIzCMc4M0rGlYf/Pn7M9wvXMtU7VjYIcJL8KpH854cSwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69e3b1b0-17c8-4c2c-8aeb-8b7b8edc03f2",
                            TwoFactorEnabled = false,
                            UserName = "User20@ukr.net"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac59922c-a81a-4f4b-a112-633ef999a72d",
                            Email = "User21@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Олег",
                            LastName = "Притула",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER21@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAN8dRF7VLMdyBTNyJg7dMV2AkFRut5YIEbZRt1o2+yxiBn3vcJmGeHP11NSqpNrHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb5fffd2-2261-4fcb-953c-780a7ce11c6f",
                            TwoFactorEnabled = false,
                            UserName = "User21@outlook.com"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08b867f5-1380-42e9-93d0-1dedd4ed55e5",
                            Email = "User22@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Анатолій",
                            LastName = "Назаренко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER22@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOTskItVqCnynM+gYQh+SQS9vv5TGvXZ0eLRS49TQUo7sry9fZvntulnIxVOZxg0rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d034b441-a914-46f9-83f1-530e06404350",
                            TwoFactorEnabled = false,
                            UserName = "User22@gmail.com"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "269125e9-da6e-413e-a2c8-2a7f929f35cf",
                            Email = "User23@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Микола",
                            LastName = "Вакуленко",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER23@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvxZ0kSnIo9yhE6yCc1Dhg7qHshP+XPGH+Gpu/+AOGMgGYPCQvv2m0Y20LpCMpv+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ea89d5a-66bc-4638-b37c-ee9123c41ff1",
                            TwoFactorEnabled = false,
                            UserName = "User23@ukr.net"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab28009c-296f-414a-8de0-01d63573c829",
                            Email = "User24@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Степан",
                            LastName = "Барабаш",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER24@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECj9GkFuw0kqqAyHW7yuOyhXvrHusUMSXuGeVeQ3VGuNLubh9xoAllUaoDAnYSyojg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d6a3d32-56ab-4639-83d2-b5b94241c7d4",
                            TwoFactorEnabled = false,
                            UserName = "User24@outlook.com"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa7704f9-de86-4015-8ba7-b2492388cbcf",
                            Email = "User25@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Денис",
                            LastName = "Ярема",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER25@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH+mLXWywkvxO5T7Uk99Uy8fOD8s8Q1sqUKXTAvZ4AMrmLcxeMOabXrzDzXLrzVlUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1117280-91ec-4bdc-9ba9-9a14f3b45360",
                            TwoFactorEnabled = false,
                            UserName = "User25@gmail.com"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6a342a8-cc1b-4aef-80fc-bc599c44e342",
                            Email = "User26@ukr.net",
                            EmailConfirmed = true,
                            FirstName = "Олег",
                            LastName = "Таралевич",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER26@UKR.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEMOc8OfkMBuSI4D2j2TG7TKDbrO8dBwY97BrQQGBRrv/hefDOQuItFrJREmsO7YgsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "365f1048-4488-4091-98f4-add803b7e88f",
                            TwoFactorEnabled = false,
                            UserName = "User26@ukr.net"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da35d8b4-1764-462c-b070-0b0077562ef8",
                            Email = "User27@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Сергій",
                            LastName = "Іващук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER27@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIQbZxFLgsLXLaeySPAUp+lWE38gQpO7ynjsXBly6RX8EcUbggB5sFO4/ny/AmDPMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c222ec6-3585-4600-bccb-705638631f8c",
                            TwoFactorEnabled = false,
                            UserName = "User27@gmail.com"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c66632eb-94cd-4057-aed2-94d0b17223bb",
                            Email = "User28@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Михайло",
                            LastName = "Компанієць",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER28@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBOk0fF59rjolqT7P4IrpVW2Sd0O+D/JSOXMMOrz59juEprYh42VvFnkP/6zHqGsMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed0fd00b-1a9a-41f5-a34e-895040af9d63",
                            TwoFactorEnabled = false,
                            UserName = "User28@yahoo.com"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6392b824-a6f6-48c9-ac81-005e7682291d",
                            Email = "User29@outlook.com",
                            EmailConfirmed = true,
                            FirstName = "Андрій",
                            LastName = "Іващук",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER29@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOCD+sEDK5YARjsXCxaDW77IuVLjrfjdV1UITHvuL0ZPnI5tGCqUeVYealfMR3tEAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d2d0ca6-44be-4d79-a1bf-76e2ee3edf53",
                            TwoFactorEnabled = false,
                            UserName = "User29@outlook.com"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b516f39-62a1-44c6-8595-9d13af40e895",
                            Email = "User30@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Назар",
                            LastName = "Мельник",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER30@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOuOkemeHK4wEpNT8Io1H3O9NGLdryV0kQQVVrg96uSer34OClCXLqEt4ZbaIA2WXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1f16915-3fd5-4d1a-8f1b-6e5b0b174d48",
                            TwoFactorEnabled = false,
                            UserName = "User30@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "3",
                            Name = "Barber",
                            NormalizedName = "Barber"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "4",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 22,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 23,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 24,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 25,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 26,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 27,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 28,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 29,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 30,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Barber", "Barber")
                        .WithMany("Appointments")
                        .HasForeignKey("BarberUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Barbe__3D5E1FD2");

                    b.HasOne("Customers_DAL.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Custo__3E52440B");

                    b.Navigation("Barber");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Appointme__Appoi__412EB0B6");

                    b.HasOne("Customers_DAL.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Appointme__Servi__4222D4EF");

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Employee", "Employee")
                        .WithOne("Barber")
                        .HasForeignKey("Customers_DAL.Entities.Barber", "EmployeeUserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Barber_User");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Customers_DAL.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Customer_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Employee__Branch__29572725");

                    b.HasOne("Customers_DAL.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Customers_DAL.Entities.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_User");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Customers_DAL.Entities.EmployeeDayOff", b =>
                {
                    b.HasOne("Customers_DAL.Entities.DayOff", "DayOff")
                        .WithMany("EmployeeDayOffs")
                        .HasForeignKey("DayOffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK__EmployeeD__DayOf__2F10007B");

                    b.HasOne("Customers_DAL.Entities.Employee", "EmployeeUser")
                        .WithMany("EmployeeDayOffs")
                        .HasForeignKey("EmployeeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__EmployeeD__Emplo__2E1BDC42");

                    b.Navigation("DayOff");

                    b.Navigation("EmployeeUser");
                });

            modelBuilder.Entity("Customers_DAL.Entities.ServiceDiscount", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Branch", "Branch")
                        .WithMany("ServiceDiscounts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ServiceDi__Branc__3A81B327");

                    b.HasOne("Customers_DAL.Entities.Service", "Service")
                        .WithMany("ServiceDiscounts")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ServiceDi__Servi__398D8EEE");

                    b.Navigation("Branch");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("ServiceDiscounts");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.DayOff", b =>
                {
                    b.Navigation("EmployeeDayOffs");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.Navigation("Barber")
                        .IsRequired();

                    b.Navigation("EmployeeDayOffs");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");

                    b.Navigation("ServiceDiscounts");
                });

            modelBuilder.Entity("Customers_DAL.Entities.User", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Customers_DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Customers_DAL.Migrations
{
    [DbContext(typeof(BarbershopDbContext))]
    [Migration("20220602162954_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_100_CI_AS_SC_UTF8")
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppDate")
                        .HasColumnType("date");

                    b.Property<int>("AppointmentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("BarberUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("BeginTime")
                        .HasColumnType("time");

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BarberUserId");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentService", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.Property<int>("EmployeeUserId")
                        .HasColumnType("int");

                    b.Property<int>("ChairNum")
                        .HasColumnType("int");

                    b.HasKey("EmployeeUserId")
                        .HasName("PK_Barber_User");

                    b.ToTable("Barber", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Descript")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Branch", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VisitsNum")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK_Customer_User");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.DayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date_");

                    b.HasKey("Id");

                    b.ToTable("DayOff", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PassportImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK_Employee_User");

                    b.HasIndex("BranchId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.EmployeeDayOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DayOffId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DayOffId");

                    b.HasIndex("EmployeeUserId");

                    b.ToTable("EmployeeDayOff", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.PossibleTime", b =>
                {
                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.HasKey("Time")
                        .HasName("PK__Possible__8E79CB0049844667");

                    b.ToTable("PossibleTime", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Name_");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("Id");

                    b.ToTable("Service_", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("User_", (string)null);
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Barber", "Barber")
                        .WithMany("Appointments")
                        .HasForeignKey("BarberUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Barbe__3D5E1FD2");

                    b.HasOne("Customers_DAL.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Appointme__Custo__3E52440B");

                    b.Navigation("Barber");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Customers_DAL.Entities.AppointmentService", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK__Appointme__Appoi__412EB0B6");

                    b.HasOne("Customers_DAL.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Appointme__Servi__4222D4EF");

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Employee", "Employee")
                        .WithOne("Barber")
                        .HasForeignKey("Customers_DAL.Entities.Barber", "EmployeeUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Barber_User");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.HasOne("Customers_DAL.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Customers_DAL.Entities.Customer", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.HasOne("Customers_DAL.Entities.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK__Employee__Branch__29572725");

                    b.HasOne("Customers_DAL.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Customers_DAL.Entities.Employee", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_User");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Customers_DAL.Entities.EmployeeDayOff", b =>
                {
                    b.HasOne("Customers_DAL.Entities.DayOff", "DayOff")
                        .WithMany("EmployeeDayOffs")
                        .HasForeignKey("DayOffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK__EmployeeD__DayOf__2F10007B");

                    b.HasOne("Customers_DAL.Entities.Employee", "EmployeeUser")
                        .WithMany("EmployeeDayOffs")
                        .HasForeignKey("EmployeeUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("FK__EmployeeD__Emplo__2E1BDC42");

                    b.Navigation("DayOff");

                    b.Navigation("EmployeeUser");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Barber", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Branch", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Customers_DAL.Entities.DayOff", b =>
                {
                    b.Navigation("EmployeeDayOffs");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Employee", b =>
                {
                    b.Navigation("Barber")
                        .IsRequired();

                    b.Navigation("EmployeeDayOffs");
                });

            modelBuilder.Entity("Customers_DAL.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("Customers_DAL.Entities.User", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
